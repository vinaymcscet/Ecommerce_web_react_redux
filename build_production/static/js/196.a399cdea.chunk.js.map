{"version":3,"file":"static/js/196.a399cdea.chunk.js","mappings":"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","sources":["components/AddressModal/AddressModal.jsx","components/Button/Button.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  editAddress,\r\n  removeAddress,\r\n  saveAddress,\r\n  setDefaultAddress,\r\n  toggleAddressModal,\r\n} from \"../../store/slice/modalSlice\";\r\nimport \"./AddressModal.css\";\r\nimport Button from \"../Button/Button\";\r\nimport { addListAddress, defaultListAddress, deleteListAddress, getListAddress, updateListAddress } from \"../../store/slice/api_integration\";\r\n\r\nconst AddressModal = () => {\r\n  const dispatch = useDispatch();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const tabRefs = [useRef(null), useRef(null)];\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [editAddressId, setEditAddressId] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    id: \"\",\r\n    fullName: \"\",\r\n    email: \"\",\r\n    mobile: \"\",\r\n    house_no: \"\",\r\n    address: \"\",\r\n    country: \"\",\r\n    city: \"\",\r\n    pincode: \"\",\r\n    isDefault: false,\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const { addresses, defaultAddressId, selectedAddress, isAddressModelOpen } = useSelector(\r\n    (state) => state.modal\r\n  );\r\n  const { user } = useSelector((state) => state.user);\r\n  \r\n  const closeModal = () => {\r\n    dispatch(toggleAddressModal(false));\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    let updatedValue = value;\r\n    if (name === \"mobile\" && /^\\d+$/.test(value) && !value.startsWith(\"+44\")) {\r\n      updatedValue = `+44${value}`;\r\n      setFormData({ ...formData, [name]: updatedValue });\r\n    } else {\r\n      setFormData({ ...formData, [name]: value });\r\n    }\r\n    setErrors({ ...errors, [name]: \"\" });\r\n  };\r\n  \r\n  const validateAddressFields = () => {\r\n    const newErrors = {};\r\n    if (!formData.address.trim())\r\n      newErrors.address = \"Address is required.\";\r\n    if (!formData.country.trim())\r\n      newErrors.country = \"Country is required.\";\r\n    if (!formData.city.trim()) newErrors.city = \"City is required.\";\r\n    if (!formData.house_no.trim()) newErrors.house_no = \"House Number is required.\";\r\n    if (!/^[A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2}$/i.test(formData.pincode))\r\n      newErrors.pincode = \"Invalid UK postal code.\";\r\n    return newErrors;\r\n  };\r\n\r\n  // Validate form inputs\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    if (!formData.fullName.trim()) newErrors.fullName = \"Full Name is required\";\r\n    if (\r\n      !formData.email.trim() ||\r\n      !/\\S+@\\S+\\.\\S+/.test(formData.email)) newErrors.email = \"Invalid email address.\";\r\n    if (\r\n      !formData?.mobile?.trim() ||\r\n      !/^\\+44\\d{10}$/.test(formData.mobile)\r\n    ) newErrors.mobile = \"Phone number must be in the format +44XXXXXXXXXX (UK format).\";\r\n    const addressErrors = validateAddressFields();\r\n    return { ...newErrors, ...addressErrors };\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const validationErrors = validateForm();\r\n    const responseObj = {\r\n      full_name: formData.fullName,\r\n      mobile: formData.mobile,\r\n      email: formData.email,\r\n      house_number: formData.house_no,\r\n      street: formData.address,\r\n      locality: formData.city,\r\n      postcode: formData.pincode,\r\n      country: formData.country,\r\n      ...(isEditMode && { id: formData.id }) // Add id only if editing\r\n    };\r\n    const responsePayload = {\r\n      offset: 0,\r\n      limit: 20\r\n    }\r\n    if (Object.keys(validationErrors).length === 0) {\r\n      if(isEditMode) {\r\n        dispatch(updateListAddress(responseObj));\r\n        dispatch(getListAddress(responsePayload));\r\n      } else {\r\n        dispatch(addListAddress(responseObj));\r\n        dispatch(getListAddress(responsePayload));\r\n      }\r\n      // Clear form after successful submission\r\n      setFormData({\r\n        id: \"\",\r\n        fullName: \"\",\r\n        email: \"\",\r\n        mobile: \"\",\r\n        address: \"\",\r\n        country: \"\",\r\n        city: \"\",\r\n        pincode: \"\",\r\n        house_no: \"\",\r\n        isDefault: false,\r\n      });\r\n      setIsEditMode(false);\r\n      setActiveTab(1); // Switch to the \"Save Address\" tab\r\n    } else {\r\n      setErrors(validationErrors);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (address) => {\r\n    const editAddressObj = {\r\n      id: address.id,\r\n      fullName: address?.full_name?.trim(),\r\n      phone: address?.mobile?.trim(),\r\n      email: address?.email?.trim(),\r\n      house_no: address?.house_number?.trim(),\r\n      address: address?.street?.trim(),\r\n      city: address?.locality?.trim(),\r\n      pincode: address?.postcode?.trim(),\r\n      country: address?.country?.trim(),\r\n      isDefault: false,\r\n    }\r\n    setFormData({ ...editAddressObj }); // Populate form with selected address\r\n    setIsEditMode(true); \r\n    setActiveTab(0);\r\n  };\r\n\r\n  const handleRemove = (addressId) => {\r\n    const responseObj = { id: addressId }\r\n    dispatch(deleteListAddress(responseObj));\r\n    // dispatch(removeAddress(id));\r\n  };\r\n\r\n  const handleSetDefault = (addressId) => {\r\n    const responseObj = { id: addressId }\r\n    dispatch(defaultListAddress(responseObj));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const responseObj = {\r\n      offset: 0,\r\n      limit: 20\r\n    }\r\n    dispatch(getListAddress(responseObj));\r\n    if (selectedAddress && isAddressModelOpen) {\r\n      setFormData({\r\n        id: selectedAddress.id,\r\n        fullName: selectedAddress.full_name,\r\n        email: selectedAddress.email,\r\n        address: selectedAddress.street,\r\n        country: selectedAddress.country,\r\n        city: selectedAddress.locality,\r\n        pincode: selectedAddress.postcode,\r\n        mobile: selectedAddress.mobile,\r\n        house_no: selectedAddress.house_number,\r\n        isDefault: false,\r\n      });\r\n      setIsEditMode(true);\r\n      setEditAddressId(selectedAddress.id);\r\n    }\r\n  }, [selectedAddress, isAddressModelOpen]);\r\n\r\n  return (\r\n    <div className=\"categoryModal address\">\r\n      <div className=\"modalBackdrop\">\r\n        <div className=\"modalContent\">\r\n          <div className=\"close\" onClick={() => closeModal()}>\r\n            <CloseIcon />\r\n          </div>\r\n          <div className=\"addressTabsContainer\">\r\n            <div className=\"tabs-container\">\r\n              <div className=\"tabs-buttons\">\r\n                <button\r\n                  className={activeTab === 0 ? \"active\" : \"\"}\r\n                  onClick={() => setActiveTab(0)}\r\n                >\r\n                  {isEditMode ? \"Edit Address\" : \"Add Address\"}\r\n                </button>\r\n                <button\r\n                  className={activeTab === 1 ? \"active\" : \"\"}\r\n                  onClick={() => setActiveTab(1)}\r\n                >\r\n                  Save Address\r\n                </button>\r\n              </div>\r\n              <div className=\"tabs-content\">\r\n                <div\r\n                  className=\"tab-content\"\r\n                  ref={tabRefs[0]}\r\n                  style={{ display: activeTab === 0 ? \"block\" : \"none\" }}\r\n                >\r\n                  <div className=\"addressForm\">\r\n                    <form onSubmit={handleSubmit}>\r\n                      <div className=\"box\">\r\n                        <div className=\"form-control\">\r\n                          <label>Full Name(First and Last name)</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"fullName\"\r\n                            value={formData.fullName}\r\n                            onChange={handleInputChange}\r\n                          />\r\n                          {errors.fullName && (\r\n                            <p className=\"error\">{errors.fullName}</p>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                          <label>Mobile Number</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"mobile\"\r\n                            value={formData.mobile}\r\n                            onChange={handleInputChange}\r\n                          />\r\n                          {errors.mobile && (\r\n                            <p className=\"error\">{errors.mobile}</p>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"box\">\r\n                        <div className=\"form-control\">\r\n                          <label>Email</label>\r\n                          <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={formData.email}\r\n                            onChange={handleInputChange}\r\n                          />\r\n                          {errors.email && (\r\n                            <p className=\"error\">{errors.email}</p>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                          <label>House Number</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"house_no\"\r\n                            value={formData.house_no}\r\n                            onChange={handleInputChange}\r\n                          />\r\n                          {errors.house_no && (\r\n                            <p className=\"error\">{errors.house_no}</p>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"box\">\r\n                        <div className=\"form-control\">\r\n                          <label>Full Address</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"address\"\r\n                            value={formData.address}\r\n                            onChange={handleInputChange}\r\n                          />\r\n                          {errors.address && (\r\n                            <p className=\"error\">{errors.address}</p>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                          <label>Town/City</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"city\"\r\n                            value={formData.city}\r\n                            onChange={handleInputChange}\r\n                          />\r\n                          {errors.city && (\r\n                            <p className=\"error\">{errors.city}</p>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"box\">\r\n                      <div className=\"form-control\">\r\n                          <label>Pincode</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"pincode\"\r\n                            value={formData.pincode}\r\n                            onChange={handleInputChange}\r\n                          />\r\n                          {errors.pincode && (\r\n                            <p className=\"error\">{errors.pincode}</p>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                          <label>Country/Region</label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"country\"\r\n                            value={formData.country}\r\n                            onChange={handleInputChange}\r\n                          />\r\n                          {errors.country && (\r\n                            <p className=\"error\">{errors.country}</p>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <Button\r\n                        type=\"submit\"\r\n                        value={isEditMode ? \"Update Address\" : \"Save Address\"}\r\n                        varient=\"explore\"\r\n                        space=\"sp-10\"\r\n                      />\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className=\"tab-content\"\r\n                  ref={tabRefs[1]}\r\n                  style={{ display: activeTab === 1 ? \"block\" : \"none\" }}\r\n                >\r\n                  <div className=\"addressList\">\r\n                    {user[0]?.addresses?.length > 0 ? (\r\n                      <ul>\r\n                        {user[0]?.addresses?.map((address) => (\r\n                          <li key={address.id}>\r\n                            <h4>{address.fullName}</h4>\r\n                            <p>\r\n                              Full Address: {address.house_number}, {address.street},\r\n                              {address.locality}, {address.postcode}\r\n                            </p>\r\n                            <p>Phone Number: {address.mobile}</p>\r\n                            <p>Email: {address.email}</p>\r\n                            <div className=\"action\">\r\n                              <p onClick={() => handleEdit(address)}>Edit |</p>\r\n                              <p onClick={() => handleRemove(address.id)}>\r\n                                Remove |\r\n                              </p>\r\n                              <p onClick={() => handleSetDefault(address.id)}>\r\n                                {address.isDefault.toLowerCase() === 'true'\r\n                                  ? \"Default\"\r\n                                  : \"Set as Default\"}\r\n                              </p>\r\n                            </div>\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                    ) : (\r\n                      <p>No saved addresses</p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddressModal;\r\n","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = ({type, value, varient, space, handleClick}) => {\r\n  return (\r\n    <div>\r\n        <button type={type} className={`${varient} ${space}`} onClick={handleClick}>{value}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Button"],"names":["AddressModal","_user$","_user$$addresses","_user$2","_user$2$addresses","dispatch","useDispatch","activeTab","setActiveTab","useState","tabRefs","useRef","isEditMode","setIsEditMode","editAddressId","setEditAddressId","formData","setFormData","id","fullName","email","mobile","house_no","address","country","city","pincode","isDefault","errors","setErrors","addresses","defaultAddressId","selectedAddress","isAddressModelOpen","useSelector","state","modal","user","handleInputChange","e","name","value","target","updatedValue","test","startsWith","validateForm","_formData$mobile","newErrors","trim","addressErrors","validateAddressFields","useEffect","getListAddress","offset","limit","full_name","street","locality","postcode","house_number","_jsx","className","children","_jsxs","onClick","toggleAddressModal","CloseIcon","ref","style","display","onSubmit","preventDefault","validationErrors","responseObj","responsePayload","Object","keys","length","updateListAddress","addListAddress","type","onChange","Button","varient","space","map","_address$full_name","_address$mobile","_address$email","_address$house_number","_address$street","_address$locality","_address$postcode","_address$country","editAddressObj","phone","handleEdit","addressId","deleteListAddress","handleRemove","defaultListAddress","handleSetDefault","toLowerCase","_ref","handleClick"],"sourceRoot":""}