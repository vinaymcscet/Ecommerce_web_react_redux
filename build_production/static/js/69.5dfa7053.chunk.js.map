{"version":3,"file":"static/js/69.5dfa7053.chunk.js","mappings":"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","sources":["components/StarRating/StarRating.jsx","pages/Notifications/Notifications.jsx","pages/Wishlist/Wishlist.jsx","pages/Coupens/Coupens.jsx","pages/Reviews/Reviews.jsx","pages/DeliveredOrders/DeliveredOrders.jsx","pages/ReturnOrders/ReturnOrders.jsx","pages/CancelledOrders/CancelledOrders.jsx","pages/ActiveOrders/ActiveOrders.jsx","pages/Address/Address.jsx","pages/Profile/Profile.jsx","utils/FormatDateTime.js","utils/ShareProduct.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './StarRating.css';\r\n\r\nconst StarRating = ({ userrating = 0, onRatingChange }) => {\r\n    const [rating, setRating] = useState(userrating ? userrating : 0);\r\n    // const [hover, setHover] = useState(null);\r\n    // const [totalStars, setTotalStars] = useState(5);\r\n    const [totalStars] = useState(5);\r\n    const handleRatingSelect = (currentRating) => {\r\n        setRating(currentRating); // Update local rating state\r\n        if (onRatingChange) {\r\n            onRatingChange(currentRating); // Notify parent of the change\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"starRating\">\r\n            {[...Array(totalStars)].map((star, index) => {\r\n                const currentRating = index + 1;\r\n                return (\r\n                    <label key={index}>\r\n                        <input\r\n                            key={star}\r\n                            type=\"radio\"\r\n                            name=\"rating\"\r\n                            value={currentRating}\r\n                            onChange={() => handleRatingSelect(currentRating)}\r\n                            userrating = {rating}\r\n                        />\r\n                        <span\r\n                            className=\"star\"\r\n                            style={{\r\n                                color:\r\n                                    // currentRating <= (hover || rating) ? \"#ffc107\" : \"#e4e5e9\",\r\n                                    currentRating <= rating ? \"#ffc107\" : \"#e4e5e9\",\r\n                            }}\r\n                        // onMouseEnter={() => setHover(currentRating)}\r\n                        // onMouseLeave={() => setHover(null)}\r\n                        >\r\n                            &#9733;\r\n                        </span>\r\n                    </label>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StarRating","import React, { useEffect, useState } from 'react';\r\nimport './Notifications.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clearNotificationsData, getNotificationsData } from '../../store/slice/api_integration';\r\nimport { FormatDateTime } from '../../utils/FormatDateTime';\r\nimport { DEFAULT_OPTIONS } from '../../utils/Constants';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { CircularProgress } from '@mui/material';\r\n\r\nconst Notifications = () => {\r\n    const [page, setPage] = useState(0);  // Default page 0 (first page)\r\n    const [perPage, setPerPage] = useState(50);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const { notifications, notificationCount = 0 } = useSelector(state => state.user);\r\n    \r\n    const handleClearNotification = () => {\r\n        dispatch(clearNotificationsData());\r\n    }\r\n\r\n     // Pagination code for User Review List\r\n     useEffect(() => {\r\n        setLoading(true)\r\n        // Extract parameters from the URL\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || perPage;\r\n      \r\n        // Update state with URL parameters\r\n        setPage(pageParam - 1); // Sync pagination (0-based indexing)\r\n        setPerPage(itemsPerPageParam);\r\n      \r\n        // Calculate offset and limit dynamically\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n      \r\n        // Dispatch the API call with updated parameters\r\n        const responseObj = {\r\n          offset,\r\n          limit\r\n        }\r\n        dispatch(getNotificationsData(responseObj)).finally(() => {\r\n            setLoading(false)\r\n        });\r\n      }, [location.search, perPage ,dispatch]);\r\n      \r\n      // Handle dropdown change for itemsPerPage\r\n      const handleNotificationsPerPageChange = (e) => {\r\n        const newItemsPerPage = parseInt(e.target.value, 10);\r\n        setPerPage(newItemsPerPage);\r\n        setPage(0); // Reset to the first page\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", 1);\r\n        searchParams.set(\"itemsPerPage\", newItemsPerPage);\r\n        navigate(`?${searchParams.toString()}`);\r\n      };\r\n      \r\n      // Handle page change for pagination\r\n      const handleNotificationsPageChange = (data) => {\r\n        const { selected } = data; // `react-paginate` provides 0-based page index\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", selected + 1); // Convert to 1-based indexing\r\n        navigate(`?${searchParams.toString()}`); // Update URL\r\n      };\r\n  \r\n      // Dropdown options for itemsPerPage\r\n      const notificationsPerPageOptions = DEFAULT_OPTIONS.filter(option => option <= notificationCount);\r\n     \r\n  return (\r\n    <div className=\"notifications\">\r\n        <div className='notificationHeader'>\r\n            <h4>Notifications List</h4>\r\n        </div>\r\n        {notifications && <h6 onClick={handleClearNotification}>Clear Notification</h6>}\r\n            {loading ? (\r\n                <div className=\"loadingContainer\">\r\n                    <CircularProgress />\r\n                </div>\r\n            ) : (\r\n                <div className=\"notificationBox\">\r\n                    {notifications && notifications.map((notification, index) => (\r\n                        <div className=\"notify\" key={index}>\r\n                            <div className=\"leftNotification\">\r\n                                <img src={notification?.image} alt={notification?.title} />\r\n                            </div>\r\n                            <div className=\"rightNotification\">\r\n                                <h4>{notification?.title}</h4>\r\n                                <p>{notification.message}</p>\r\n                                <p className='date'>Date: {FormatDateTime(notification.created_at)}</p>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                    {notifications === null && <p className='noNotifications'>No notifications found.</p>}\r\n                </div>\r\n            )}\r\n            {notifications?.length > 0 && <div className='paginationBox'>\r\n                {/* <div className=\"itemsPerPageDropdown\">\r\n                    <label>Items per page: </label>\r\n                    <select value={perPage} onChange={handleNotificationsPerPageChange}>\r\n                        {notificationsPerPageOptions.map(option => (\r\n                            <option key={option} value={option}>\r\n                                {option}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div> */}\r\n                {/* Pagination component */}\r\n                <ReactPaginate\r\n                    previousLabel={\"Previous\"}\r\n                    nextLabel={\"Next\"}\r\n                    breakLabel={\"...\"}\r\n                    breakClassName={\"break-me\"}\r\n                    pageCount={Math.max(Math.ceil(notificationCount / perPage), 1)}\r\n                    marginPagesDisplayed={2}\r\n                    pageRangeDisplayed={3}\r\n                    onPageChange={(ev) => handleNotificationsPageChange(ev)}\r\n                    containerClassName={\"pagination\"}\r\n                    activeClassName={\"active\"}\r\n                    forcePage={page}  // Sync current page with URL\r\n                    disabled={notificationCount === 0} \r\n                />\r\n                </div>\r\n            }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notifications","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DEFAULT_OPTIONS } from '../../utils/Constants';\r\nimport { addToCartData, deleteSingleWhistListData, getListOfWhistListData, productDetailData } from '../../store/slice/api_integration';\r\nimport StarRating from '../../components/StarRating/StarRating';\r\nimport { ShareProduct } from '../../utils/ShareProduct';\r\nimport { setListWishList } from '../../store/slice/productSlice';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { CircularProgress } from '@mui/material';\r\nimport './Wishlist.css';\r\n\r\nconst Wishlist = () => { \r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [wishListPage, setWishListPage] = useState(0);  // Default page 0 (first page)\r\n    const [wishListItemsPerPage, setWishListItemsPerPage] = useState(30);\r\n    const { \r\n        listWishlist, \r\n        totalWishlistCount = 0, \r\n    } = useSelector((state) => state.product);    \r\n\r\n    // remove wishlist\r\n    const handleRemoveWishListItem = (productId) => {\r\n        const updatedWishlist = listWishlist.filter((item) => item.sku_id !== productId);\r\n        dispatch(setListWishList(updatedWishlist)); \r\n\r\n        const responseObj = { sku_id: productId };\r\n        dispatch(deleteSingleWhistListData(responseObj)).then(() => {\r\n            // Re-fetch the updated wishlist after the deletion\r\n            const offset = (wishListPage * wishListItemsPerPage) + 1;\r\n            const limit = wishListItemsPerPage;\r\n    \r\n            const fetchResponseObj = {\r\n                offset,\r\n                limit\r\n            };\r\n            dispatch(getListOfWhistListData(fetchResponseObj));\r\n        });\r\n    };\r\n\r\n    // Add to cart from wishlist page\r\n    const handleAddToCart = (item) => {\r\n        // Dispatch product details and quantity to Redux\r\n        const responseObj = { \r\n            product_id: item.product_id,\r\n        }\r\n        dispatch(productDetailData(responseObj))\r\n        navigate(`/product/${item.product_id}`, { state: { product: item } });\r\n        // const responseObj = {\r\n        //     sku_id: item?.sku_id,\r\n        //     type: 'increase'\r\n        // }\r\n        // dispatch(addToCartData(responseObj))\r\n    };\r\n\r\n    // Pagination Code for WishList Items\r\n    useEffect(() => {\r\n    // Extract parameters from the URL\r\n    setLoading(true)\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const pageParam = parseInt(searchParams.get(\"wishListPage\"), 10) || 1;\r\n    const itemsPerPageParam = parseInt(searchParams.get(\"wishListItemsPerPage\"), 10) || wishListItemsPerPage;\r\n    \r\n    // Update state with URL parameters\r\n    setWishListPage(pageParam - 1); // Sync pagination (0-based indexing)\r\n    setWishListItemsPerPage(itemsPerPageParam);\r\n    \r\n    // Calculate offset and limit dynamically\r\n    const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n    const limit = itemsPerPageParam;\r\n    \r\n    // Dispatch the API call with updated parameters\r\n    const responseObj = {\r\n        offset,\r\n        limit\r\n    }\r\n    dispatch(getListOfWhistListData(responseObj)).finally(() => {\r\n      setLoading(false);\r\n    });\r\n    }, [location.search, dispatch]);\r\n    \r\n    // Handle dropdown change for itemsPerPage\r\n    const handleWishListItemsPerPageChange = (e) => {\r\n    const newItemsPerPage = parseInt(e.target.value, 10);\r\n    setWishListItemsPerPage(newItemsPerPage);\r\n    setWishListPage(0); // Reset to the first page\r\n    const searchParams = new URLSearchParams(location.search);\r\n    searchParams.set(\"wishListPage\", 1);\r\n    searchParams.set(\"wishListItemsPerPage\", newItemsPerPage);\r\n    navigate(`?${searchParams.toString()}`);\r\n    };\r\n    \r\n    // Handle page change for pagination\r\n    const handleWishListPageChange = (data) => {\r\n    const { selected } = data; // `react-paginate` provides 0-based page index\r\n    const searchParams = new URLSearchParams(location.search);\r\n    searchParams.set(\"page\", selected + 1); // Convert to 1-based indexing\r\n    navigate(`?${searchParams.toString()}`); // Update URL\r\n    };\r\n\r\n    // Dropdown options for itemsPerPage\r\n    const wishListItemsPerPageOptions = DEFAULT_OPTIONS.filter(option => option <= totalWishlistCount);  \r\n\r\n  return (\r\n    \r\n    <div className=\"whistlistList\">\r\n      <h3>Your Wishlist Waiting...</h3>\r\n          <div className=\"wishlistContent\">\r\n              {loading ? (\r\n                <div className=\"loadingContainer\">\r\n                    <CircularProgress />\r\n                </div>\r\n                ) : (\r\n                <div className=\"whistListWrapper\">\r\n                    {listWishlist && listWishlist.map((item, index) => (\r\n                        <div key={index} className=\"whistlistMainWrapper\">\r\n                            <div className=\"whistlistBox\">\r\n                                <div className=\"leftWhistlist\">\r\n                                    <img src={item.imageUrl} alt={item.name} />\r\n                                </div>\r\n                                <div className=\"rightWhistlist\">\r\n                                    <h4>\r\n                                        <span>{item.name}</span>\r\n                                        <button className=\"addToCart\" onClick={() => handleAddToCart(item)}>Add to cart</button>\r\n                                    </h4>\r\n                                    {item.rating && <StarRating userrating={item.rating} />}\r\n                                    <div className=\"priceSection\">\r\n                                        <div className=\"priceList\">\r\n                                            <p className=\"discount\">£ {item.discountedPrice}</p>\r\n                                            <p className=\"original\">£ {item.price}</p>\r\n                                        </div>\r\n                                        {item.offer && <p className=\"discount\">£ {item.offer}</p>}\r\n                                    </div>\r\n                                    <div className=\"cartActionItems\">\r\n                                        <div className=\"icon\" onClick={() => ShareProduct(item?.product_id)}>\r\n                                            <img src=\"/images/icons/share.svg\" alt=\"share Item\" />\r\n                                        </div>\r\n                                        <div className=\"icon\" onClick={() => handleRemoveWishListItem(item.sku_id)}>\r\n                                            <img src=\"/images/icons/delete.svg\" alt=\"delete Item\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                    {listWishlist === null && <p className=\"noWishlist\">Your wishlist is empty.</p>}\r\n                </div>\r\n              )}\r\n          </div>\r\n            {listWishlist && (\r\n                <div className='paginationBox'>\r\n                    {/* <div className=\"itemsPerPageDropdown\">\r\n                        <label>Items per page: </label>\r\n                        <select value={wishListItemsPerPage} onChange={handleWishListItemsPerPageChange}>\r\n                            {wishListItemsPerPageOptions.map(option => (\r\n                                <option key={option} value={option}>\r\n                                    {option}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div> */}\r\n                    <ReactPaginate\r\n                        previousLabel={\"Previous\"}\r\n                        nextLabel={\"Next\"}\r\n                        breakLabel={\"...\"}\r\n                        breakClassName={\"break-me\"}\r\n                        pageCount={Math.max(Math.ceil(totalWishlistCount / wishListItemsPerPage), 1)}\r\n                        marginPagesDisplayed={2}\r\n                        pageRangeDisplayed={3}\r\n                        onPageChange={(ev) => handleWishListPageChange(ev)}\r\n                        containerClassName={\"pagination\"}\r\n                        activeClassName={\"active\"}\r\n                        forcePage={wishListPage}\r\n                        disabled={totalWishlistCount === 0} \r\n                    />\r\n                </div>\r\n              )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Wishlist","import React, { useEffect, useState } from 'react';\r\nimport './Coupens.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CircularProgress } from '@mui/material';\r\nimport { getOfferList } from '../../store/slice/api_integration';\r\n\r\nconst Coupens = () => {\r\n    const [copyMessage, setCopyMessage] = useState({ message: \"\", index: null });\r\n    const { offerList } = useSelector((state) => state.product);\r\n    const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCopy = (title, index) => {\r\n    // Copy the item.title to the clipboard\r\n    navigator.clipboard\r\n        .writeText(title)\r\n        .then(() => {\r\n        // Set success message\r\n        setCopyMessage({ message: \"Item copied to clipboard!\", index });\r\n\r\n        // Hide message after 2 minutes (120,000 milliseconds)\r\n        setTimeout(() => {\r\n            setCopyMessage({ message: \"\", index: null });\r\n        }, 2000); // 2 minutes\r\n        })\r\n        .catch((err) => {\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        dispatch(getOfferList()).finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }, [])\r\n  return (\r\n    <>\r\n        {loading ? (\r\n                <div className=\"loadingContainer\">\r\n                    <CircularProgress />\r\n                </div>\r\n            ) : (\r\n            <div className=\"coupens\">\r\n                <h3>Hurry Up!!! </h3>\r\n                <div className=\"coupensList\">\r\n                {offerList && offerList.map((item, index) => (\r\n                    <div className=\"availableCoupen\" key={index}>\r\n                        {copyMessage.index === index && (\r\n                        <p className=\"selectedCopiedMessage\">\r\n                            {copyMessage.message}\r\n                        </p>\r\n                        )}\r\n                        <div\r\n                        className=\"copySelection\"\r\n                        onClick={() => handleCopy(item.coupon_code, index)}\r\n                        >\r\n                        <img src=\"/images/icons/copy.svg\" alt=\"copy Item\" />\r\n                        </div>\r\n                        <h4>{item.coupon_title}</h4>\r\n                        <p>{item.description}</p>\r\n                        {item.term_of_use &&  (<ul>\r\n                            <li dangerouslySetInnerHTML={{__html: item.term_of_use}} />\r\n                        </ul>)\r\n                        }                      \r\n                        <p className=\"validity\">Validity: {item.valid_from} to {item.valid_till}</p>\r\n                    </div>\r\n                    ))}\r\n                {!offerList && <p>No Coupens available now</p>}\r\n                </div>\r\n            </div>\r\n        )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Coupens","import React, { useState, useEffect } from 'react';\r\nimport './Reviews.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DEFAULT_OPTIONS } from '../../utils/Constants';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { getUserReviewProductData } from '../../store/slice/api_integration';\r\nimport ReactPaginate from 'react-paginate';\r\nimport StarRating from '../../components/StarRating/StarRating';\r\nimport { CircularProgress } from '@mui/material';\r\n\r\nconst Reviews = () => {\r\n    const [reviewPage, setReviewPage] = useState(0);  // Default page 0 (first page)\r\n    const [reviewPerPage, setReviewPerPage] = useState(30);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const { \r\n        userReviewCount = 0,\r\n        userReview\r\n    } = useSelector((state) => state.product);\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n    // Pagination code for User Review List\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        // Extract parameters from the URL\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || reviewPerPage;\r\n      \r\n        // Update state with URL parameters\r\n        setReviewPage(pageParam - 1); // Sync pagination (0-based indexing)\r\n        setReviewPerPage(itemsPerPageParam);\r\n      \r\n        // Calculate offset and limit dynamically\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n      \r\n        // Dispatch the API call with updated parameters\r\n        const responseObj = {\r\n          offset,\r\n          limit\r\n        }\r\n        dispatch(getUserReviewProductData(responseObj)).finally(() => {\r\n            setLoading(false);\r\n        });\r\n      }, [location.search, reviewPerPage ,dispatch]);\r\n      \r\n      // Handle dropdown change for itemsPerPage\r\n      const handleReviewPerPageChange = (e) => {\r\n        const newItemsPerPage = parseInt(e.target.value, 10);\r\n        setReviewPerPage(newItemsPerPage);\r\n        setReviewPage(0); // Reset to the first page\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", 1);\r\n        searchParams.set(\"itemsPerPage\", newItemsPerPage);\r\n        navigate(`?${searchParams.toString()}`);\r\n      };\r\n      \r\n      // Handle page change for pagination\r\n      const handleReviewPageChange = (data) => {\r\n        const { selected } = data; // `react-paginate` provides 0-based page index\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", selected + 1); // Convert to 1-based indexing\r\n        navigate(`?${searchParams.toString()}`); // Update URL\r\n      };\r\n  \r\n      // Dropdown options for itemsPerPage\r\n      const reviewItemsPerPageOptions = DEFAULT_OPTIONS.filter(option => option <= userReviewCount);\r\n\r\n  return (\r\n    <div className=\"reviewedItems\">\r\n        <div className=\"reviewHeader\">\r\n            <h3>Item Reviews</h3>\r\n        </div>\r\n        {loading ? (\r\n        <div className=\"loadingContainer\">\r\n            <CircularProgress />\r\n        </div>\r\n        ) : (\r\n        <div className=\"reviewItemList\">\r\n            {userReview &&\r\n            userReview.map((item, index) => (\r\n                <div className=\"reviewProduct\" key={index}>\r\n                <div className=\"item_header\">\r\n                    <div className=\"leftReviewPart\">\r\n                    <img src={item.imageUrl} alt={item.product_name} />\r\n                    </div>\r\n                    <div className=\"rightReviewPart\">\r\n                    {item.product_name && <h4>{item.product_name}</h4>}\r\n                    {item.product_id && <p>ORDER # {item.product_id}</p>}\r\n                    {item.rating && (\r\n                        <StarRating userrating={item.rating} />\r\n                    )}\r\n                    </div>\r\n                </div>\r\n                {/* <p>{item.descriptipn}</p> */}\r\n                <div className=\"reviewd_prd_image\">\r\n                    {item.review_images &&\r\n                    item.review_images.map((img_data, index) => (\r\n                        <div className=\"item\" key={index}>\r\n                        <img src={img_data} alt={item.product_name} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                {/* <div className=\"review_time\">{item.date}</div> */}\r\n                </div>\r\n            ))}\r\n            {!userReview && <p className=\"noReviews\">No reviews found.</p>}\r\n        </div>\r\n        )}\r\n        {userReview && <div className='paginationBox'>\r\n            {/* <div className=\"itemsPerPageDropdown\">\r\n                <label>Items per page: </label>\r\n                <select value={reviewPerPage} onChange={handleReviewPerPageChange}>\r\n                    {reviewItemsPerPageOptions.map(option => (\r\n                        <option key={option} value={option}>\r\n                            {option}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div> */}\r\n            {/* Pagination component */}\r\n            <ReactPaginate\r\n                previousLabel={\"Previous\"}\r\n                nextLabel={\"Next\"}\r\n                breakLabel={\"...\"}\r\n                breakClassName={\"break-me\"}\r\n                pageCount={Math.max(Math.ceil(userReviewCount / reviewPerPage), 1)}\r\n                marginPagesDisplayed={2}\r\n                pageRangeDisplayed={3}\r\n                onPageChange={(ev) => handleReviewPageChange(ev)}\r\n                containerClassName={\"pagination\"}\r\n                activeClassName={\"active\"}\r\n                forcePage={reviewPage}  // Sync current page with URL\r\n                disabled={userReviewCount === 0} \r\n            />\r\n            </div>\r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Reviews","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { OrderDetailData, OrderListData } from '../../store/slice/api_integration';\r\nimport { CircularProgress } from '@mui/material';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { DEFAULT_OPTIONS } from '../../utils/Constants';\r\nimport { setCancelOrderModal } from '../../store/slice/cartSlice';\r\nimport { formatDateTimeFormatProduct, formatDateTimeProduct } from '../../utils/FormatDateTime';\r\n\r\nconst DeliveredOrders = () => {\r\n    const [deliveredPage, setDeliveredPage] = useState(0);  // Default page 0 (first page)\r\n    const [deliveredItemsPerPage, setDeliveredItemsPerPage] = useState(30);\r\n    const [deliveredOrderIndex, setDeliveredOrderIndex] = useState(null);\r\n    const [isInitialLoad, setIsInitialLoad] = useState({ delivered: true });\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const { \r\n        orderList, \r\n        deliveredOrderListCount = 0,\r\n        orderDetail,\r\n        returnStatus,\r\n        status\r\n      } = useSelector((state) => state.cart);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    \r\n  //   download PDF\r\n  const downloadPDF = (url) => {\r\n    window.open(url, \"_blank\", \"noopener,noreferrer\");\r\n  };\r\n\r\n  // Pafination code for Active order List \r\n  useEffect(() => {\r\n    if(isInitialLoad.delivered) {\r\n      setIsInitialLoad((prev) => ({\r\n        ...prev,\r\n        delivered: false,\r\n      }));\r\n      return;\r\n    }\r\n    // Extract parameters from the URL\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n    const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || deliveredItemsPerPage;\r\n  \r\n    // Update state with URL parameters\r\n    setDeliveredPage(pageParam - 1); // Sync pagination (0-based indexing)\r\n    setDeliveredItemsPerPage(itemsPerPageParam);\r\n  \r\n    // Calculate offset and limit dynamically\r\n    const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n    const limit = itemsPerPageParam;\r\n  \r\n    // Dispatch the API call with updated parameters\r\n    const responseObj = {\r\n      status: 5,\r\n      offset,\r\n      limit\r\n    }\r\n    dispatch(OrderListData(responseObj));\r\n  }, [location.search, deliveredItemsPerPage ,dispatch]);\r\n  \r\n  // Handle dropdown change for itemsPerPage\r\n  const handleDeliveredItemsPerPageChange = (e) => {\r\n    const newItemsPerPage = parseInt(e.target.value, 10);\r\n    setDeliveredItemsPerPage(newItemsPerPage);\r\n    setDeliveredPage(0); // Reset to the first page\r\n    const searchParams = new URLSearchParams(location.search);\r\n    searchParams.set(\"page\", 1);\r\n    searchParams.set(\"itemsPerPage\", newItemsPerPage);\r\n    navigate(`?${searchParams.toString()}`);\r\n  };\r\n  \r\n  // Handle page change for pagination\r\n  const handleDeliveredPageChange = (data) => {\r\n    const { selected } = data; // `react-paginate` provides 0-based page index\r\n    const searchParams = new URLSearchParams(location.search);\r\n    searchParams.set(\"page\", selected + 1); // Convert to 1-based indexing\r\n    navigate(`?${searchParams.toString()}`); // Update URL\r\n  };\r\n\r\n  // Dropdown options for itemsPerPage\r\n  const deliveredItemsPerPageOptions = DEFAULT_OPTIONS.filter(option => option <= deliveredOrderListCount);\r\n  // =========================================================\r\n  const handleDeliveredViewOrderDetails = (e, index, order) => {\r\n    e.preventDefault();\r\n    setDeliveredOrderIndex((prevIndex) => {\r\n      // If closing the current active index, return null to hide details\r\n      if (prevIndex === index) {\r\n        return null;\r\n      }\r\n  \r\n      // If opening a new order, trigger the API call\r\n      if (prevIndex !== index) {\r\n        const responseObj = {\r\n          order_id:order?.order_id,\r\n          type: 5,\r\n        }\r\n        // Call your API function\r\n        dispatch(OrderDetailData(responseObj))\r\n      }\r\n      return index;\r\n    });\r\n  };\r\n  const handleNavigateToDeliveredOrderDetail = (productList, scroll = false) => {\r\n    if (!productList || productList.length === 0) {\r\n      return;\r\n    }\r\n  \r\n    const product = productList[0];\r\n    if (product?.product_id) {\r\n      // navigate(`/product/${product.product_id}`, { state: { product } });\r\n      if(scroll) {\r\n        navigate(`/product/${product.product_id}`, { state: { product, scrollToBottom: scroll } });\r\n      } else navigate(`/product/${product.product_id}`, { state: { product } });\r\n    } else {\r\n      // console.error(\"Product ID is undefined.\");\r\n    }\r\n  };\r\n  const redirectToSupport = () => {\r\n    navigate(\"/contact\");\r\n  };\r\n  const handleCancelOrder = (e, item, returnStatus) => {\r\n    const cancelOrderPayload = { \r\n      isOpen: isOpen,\r\n      orderId: item.order_id,\r\n      skuId: item.sku_id,\r\n      returnStatus,\r\n      status: 5,\r\n    };\r\n    // dispatch(toggleCategoryModal(cancelOrderPayload));\r\n    dispatch(setCancelOrderModal(cancelOrderPayload))\r\n    // setDeliveredOrderIndex(null);\r\n  }\r\n  return (\r\n    <>\r\n        <div className=\"orderListWrapper\">\r\n            <div className=\"orderListWrapper\">\r\n              {orderList &&\r\n              orderList?.map((item, index) => (\r\n              <div className=\"orderList\" key={index}>\r\n                  <div className=\"orderDetail\">\r\n                  <div className=\"leftOrder\">\r\n                      <img src={item.product_image} alt={item.product_name} />\r\n                      <div>\r\n                      <h3>{item.product_name}</h3>\r\n                      <p className=\"openReturnWindow\">{`Return window open on ${formatDateTimeFormatProduct(item.return_date)}`}</p>\r\n                      <p>{`Order # ${item.order_number}`}</p>\r\n                      </div>\r\n                  </div>\r\n                  <div className=\"rightOrder\">\r\n                      {orderDetail?.invoice_url && <div\r\n                      onClick={() => downloadPDF(orderDetail?.invoice_url)}\r\n                      >\r\n                      Invoice\r\n                      </div>}\r\n                      <div\r\n                      className={deliveredOrderIndex === index ? \"active\" : \"disabled\"}\r\n                      onClick={() => {\r\n                          const matchingProducts = orderDetail?.orderItems?.filter((order) =>\r\n                          order?.productName?.toLowerCase() === item?.product_name.toLowerCase()\r\n                          );\r\n                          handleNavigateToDeliveredOrderDetail(matchingProducts);\r\n                      }}\r\n                      >Buy it again</div>\r\n                      <div onClick={(e) => handleDeliveredViewOrderDetails(e, index, item)}>\r\n                      {deliveredOrderIndex === index ? \"Hide order details\" : \"View order details\"}\r\n                      </div>\r\n                      <div\r\n                      className={deliveredOrderIndex === index ? \"active\" : \"disabled\"}\r\n                      onClick={() => {\r\n                          const matchingProducts = orderDetail?.orderItems?.filter((order) =>\r\n                          order?.productName?.toLowerCase() === item?.product_name.toLowerCase()\r\n                          );\r\n                          handleNavigateToDeliveredOrderDetail(matchingProducts, true);\r\n                      }}\r\n                      >write a product review</div>\r\n                      <div onClick={() => redirectToSupport()}>Get product support</div>\r\n                      <div \r\n                          className={deliveredOrderIndex === index ? \"active\" : \"disabled\"}\r\n                          onClick={(e) => handleCancelOrder(e, item, orderDetail?.returnStatus)}\r\n                      >\r\n                          {\"Cancel Order\"}\r\n                      </div>\r\n                  </div>\r\n                  </div>\r\n                  {orderDetail && <div className={`openOrderDetails ${\r\n                  deliveredOrderIndex === index ? \"show\" : \"hide\"\r\n                  }`}>\r\n                  <div className=\"userDetails\">\r\n                      <div className=\"userAddress\">\r\n                      <h6>\r\n                          SHIP To:\r\n                          <span>{orderDetail?.shippingAddress?.name}</span>\r\n                      </h6>\r\n                      <p>{orderDetail?.shippingAddress?.house_number}, {orderDetail?.shippingAddress?.street}</p>\r\n                      <p>{orderDetail?.shippingAddress?.locality}, {orderDetail?.shippingAddress?.country}</p>\r\n                      <p>Postal Code: {orderDetail?.shippingAddress?.postcode}</p>\r\n                      <p>Phone Number: {orderDetail?.shippingAddress?.phone}</p>\r\n                      </div>\r\n                      <div className=\"user_order_details\">\r\n                      {\r\n                          orderDetail?.statusDetails?.map(order => (\r\n                          <>\r\n                              <h4>{order?.status}</h4>\r\n                              <p>{formatDateTimeFormatProduct(order?.date)}</p>\r\n                          </>\r\n                          ))\r\n                      }\r\n                      <h4>TOTAL Quantity</h4>\r\n                      <p>{orderDetail?.orderItems?.map(order => (\r\n                          order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order.quantity: ''\r\n                      ))}</p>\r\n                      </div>\r\n                      <div className=\"user_order_track\">\r\n                      <h4>TRACK ORDER</h4>\r\n                      <p className=\"track\">{orderDetail?.orderNumber}</p>\r\n                      <h4>TOTAL</h4>\r\n                      <p className=\"total\">\r\n                      {orderDetail?.orderItems?.map(order => (\r\n                          order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.totalPrice : ''\r\n                      ))} include taxes\r\n                      </p>\r\n                      {orderDetail?.orderItems[0]?.variants?.Color && <h4>Color</h4>}\r\n                          {orderDetail && <p className=\"orderColor\"> {`${orderDetail?.orderItems?.map(order => (\r\n                              order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.variants?.Color: ''\r\n                          ))}`}\r\n                      </p>}\r\n                      {orderDetail?.orderItems[0]?.variants?.Size && \r\n                          <>\r\n                          <h4>Size</h4>\r\n                          {orderDetail && <p className=\"orderColor\"> {`${orderDetail?.orderItems?.map(order => (\r\n                              order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.variants?.Size: ''\r\n                          ))}`}\r\n                          </p>}\r\n                          </>}\r\n                      </div>\r\n                  </div>\r\n                  <div className=\"tracking_order_status\">\r\n                      {\r\n                          orderDetail?.statusDetails.map(item => (\r\n                          <>\r\n                              <div \r\n                              className={\r\n                                  item.status.toLowerCase() === 'cancelled' \r\n                                  ? 'order started cancel' \r\n                                  : 'order started done'\r\n                              }\r\n                              >\r\n                              <h6>{`${item?.status}`}</h6>\r\n                              <p>{`${formatDateTimeProduct(item?.date).formattedDate}`}</p>\r\n                              </div>\r\n                          </>\r\n                          ))\r\n                      }\r\n                  </div>\r\n                  </div>}\r\n              </div>\r\n              ))}\r\n              {orderList && <div className='paginationBox'>\r\n                  {/* <div className=\"itemsPerPageDropdown\">\r\n                      <label>Items per page: </label>\r\n                      <select value={deliveredItemsPerPage} onChange={handleDeliveredItemsPerPageChange}>\r\n                          {deliveredItemsPerPageOptions.map(option => (\r\n                              <option key={option} value={option}>\r\n                                  {option}\r\n                              </option>\r\n                          ))}\r\n                      </select>\r\n                  </div> */}\r\n                  {/* Pagination component */}\r\n                  <ReactPaginate\r\n                      previousLabel={\"Previous\"}\r\n                      nextLabel={\"Next\"}\r\n                      breakLabel={\"...\"}\r\n                      breakClassName={\"break-me\"}\r\n                      pageCount={Math.max(Math.ceil(deliveredOrderListCount / deliveredItemsPerPage), 1)}\r\n                      marginPagesDisplayed={2}\r\n                      pageRangeDisplayed={3}\r\n                      onPageChange={(ev) => handleDeliveredPageChange(ev)}\r\n                      containerClassName={\"pagination\"}\r\n                      activeClassName={\"active\"}\r\n                      forcePage={deliveredPage}  // Sync current page with URL\r\n                      disabled={deliveredOrderListCount === 0} \r\n                  />\r\n              </div>\r\n              }\r\n              {!orderList && <p>No orders found.</p>}\r\n            </div>\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DeliveredOrders","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { OrderDetailData, OrderListData } from '../../store/slice/api_integration';\r\nimport { DEFAULT_OPTIONS } from '../../utils/Constants';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { formatDateTimeFormatProduct, formatDateTimeProduct } from '../../utils/FormatDateTime';\r\n\r\nconst ReturnOrders = () => {\r\n  const [returnPage, setReturnPage] = useState(0);  // Default page 0 (first page)\r\n  const [returnItemsPerPage, setReturnItemsPerPage] = useState(30);\r\n  const [returnOrderIndex, setReturnOrderIndex] = useState(null);\r\n  const [isInitialLoad, setIsInitialLoad] = useState({ returned: true });\r\n  const { \r\n    orderList, \r\n    orderDetail, \r\n    returnOrderListCount = 0, \r\n  } = useSelector((state) => state.cart);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // =========================================================\r\n    // Pagination code for Return order List \r\n    useEffect(() => {\r\n        if(isInitialLoad.returned) {\r\n          setIsInitialLoad((prev) => ({\r\n            ...prev,\r\n            returned: false,\r\n          }));\r\n          return;\r\n        }\r\n        // Extract parameters from the URL\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || returnItemsPerPage;\r\n      \r\n        // Update state with URL parameters\r\n        setReturnPage(pageParam - 1); // Sync pagination (0-based indexing)\r\n        setReturnItemsPerPage(itemsPerPageParam);\r\n      \r\n        // Calculate offset and limit dynamically\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n      \r\n        // Dispatch the API call with updated parameters\r\n        const responseObj = {\r\n          status: 6,\r\n          offset,\r\n          limit\r\n        }\r\n        dispatch(OrderListData(responseObj));\r\n      }, [location.search, returnItemsPerPage ,dispatch]);\r\n      \r\n      // Handle dropdown change for itemsPerPage\r\n      const handleReturnItemsPerPageChange = (e) => {\r\n        const newItemsPerPage = parseInt(e.target.value, 10);\r\n        setReturnItemsPerPage(newItemsPerPage);\r\n        setReturnPage(0); // Reset to the first page\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", 1);\r\n        searchParams.set(\"itemsPerPage\", newItemsPerPage);\r\n        navigate(`?${searchParams.toString()}`);\r\n      };\r\n      \r\n      // Handle page change for pagination\r\n      const handleReturnPageChange = (data) => {\r\n        const { selected } = data; // `react-paginate` provides 0-based page index\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", selected + 1); // Convert to 1-based indexing\r\n        navigate(`?${searchParams.toString()}`); // Update URL\r\n      };\r\n  \r\n      // Dropdown options for itemsPerPage\r\n      const returnItemsPerPageOptions = DEFAULT_OPTIONS.filter(option => option <= returnOrderListCount);\r\n    // =========================================================\r\n        \r\n    const downloadPDF = (url) => {\r\n        window.open(url, \"_blank\", \"noopener,noreferrer\");\r\n    };\r\n\r\n    const handleReturnedViewOrderDetails = (e, index, order) => {\r\n    e.preventDefault();\r\n    setReturnOrderIndex((prevIndex) => {\r\n        // If closing the current active index, return null to hide details\r\n        if (prevIndex === index) {\r\n        return null;\r\n        }\r\n    \r\n        // If opening a new order, trigger the API call\r\n        if (prevIndex !== index) {\r\n        const responseObj = {\r\n            order_id:order?.order_id,\r\n            type: 6,\r\n        }\r\n        // Call your API function\r\n        dispatch(OrderDetailData(responseObj))\r\n        }\r\n        return index;\r\n    });\r\n    };\r\n    const handleNavigateToDetail = (productList, scroll = false) => {\r\n    if (!productList || productList.length === 0) {\r\n        return;\r\n    }\r\n    \r\n    const product = productList[0];\r\n    if (product?.product_id) {\r\n        // navigate(`/product/${product.product_id}`, { state: { product } });\r\n        if(scroll) {\r\n        navigate(`/product/${product.product_id}`, { state: { product, scrollToBottom: scroll } });\r\n        } else navigate(`/product/${product.product_id}`, { state: { product } });\r\n    } else {\r\n        // console.error(\"Product ID is undefined.\");\r\n    }\r\n    };\r\n    const redirectToSupport = () => {\r\n    navigate(\"/contact\");\r\n    };\r\n  return (\r\n    <>\r\n        <div className=\"orderListWrapper\">\r\n            {orderList &&\r\n            orderList?.map((item, index) => (\r\n                <div className=\"orderList\" key={index}>\r\n                <div className=\"orderDetail\">\r\n                    <div className=\"leftOrder\">\r\n                    <img src={item.product_image} alt={item.product_name} />\r\n                    <div>\r\n                        <h3>{item.product_name}</h3>\r\n                        <p className=\"openReturnWindow\">{`Return window open on ${item?.order_status?.returnDate}`}</p>\r\n                        <p>{`Order # ${item.order_number}`}</p>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"rightOrder\">\r\n                    {orderDetail?.invoice_url && <div\r\n                        // onClick={() => handleInvoiceDetails(item, true)}\r\n                        onClick={() => downloadPDF(orderDetail?.invoice_url)}\r\n                    >\r\n                        Invoice\r\n                    </div>}\r\n                    <div\r\n                        className={returnOrderIndex === index ? \"active\" : \"disabled\"}\r\n                        onClick={() => {\r\n                        const matchingProducts = orderDetail?.orderItems?.filter((order) =>\r\n                            order?.productName?.toLowerCase() === item?.product_name.toLowerCase()\r\n                        );\r\n                        handleNavigateToDetail(matchingProducts);\r\n                        }}\r\n                    >Buy it again</div>\r\n                    <div onClick={(e) => handleReturnedViewOrderDetails(e, index, item)}>\r\n                        {returnOrderIndex === index ? \"Hide order details\" : \"View order details\"}\r\n                    </div>\r\n                    <div\r\n                        className={returnOrderIndex === index ? \"active\" : \"disabled\"}\r\n                        onClick={() => {\r\n                        const matchingProducts = orderDetail?.orderItems?.filter((order) =>\r\n                            order?.productName?.toLowerCase() === item?.product_name.toLowerCase()\r\n                        );\r\n                        handleNavigateToDetail(matchingProducts, true);\r\n                        }}\r\n                    >write a product review</div>\r\n                    <div onClick={() => redirectToSupport()}>Get product support</div>\r\n                    </div>\r\n                </div>\r\n                {orderDetail && <div className={`openOrderDetails ${\r\n                    returnOrderIndex === index ? \"show\" : \"hide\"\r\n                    }`}>\r\n                    <div className=\"userDetails\">\r\n                    <div className=\"userAddress\">\r\n                        <h6>\r\n                        SHIP To:\r\n                        <span>{orderDetail?.shippingAddress?.name}</span>\r\n                        </h6>\r\n                        <p>{orderDetail?.shippingAddress?.house_number}, {orderDetail?.shippingAddress?.street}</p>\r\n                        <p>{orderDetail?.shippingAddress?.locality}, {orderDetail?.shippingAddress?.country}</p>\r\n                        <p>Postal Code: {orderDetail?.shippingAddress?.postcode}</p>\r\n                        <p>Phone Number: {orderDetail?.shippingAddress?.phone}</p>\r\n                    </div>\r\n                    <div className=\"user_order_details\">\r\n                        {\r\n                        orderDetail?.statusDetails?.map(order => (\r\n                            <>\r\n                                <h4>{order?.status}</h4>\r\n                                <p>{formatDateTimeFormatProduct(order?.date)}</p>\r\n                            </>\r\n                        ))\r\n                        }\r\n                        <h4>TOTAL Quantity</h4>\r\n                        <p>{orderDetail?.orderItems?.map(order => (\r\n                            order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order.quantity: ''\r\n                        ))}</p>\r\n                    </div>\r\n                    <div className=\"user_order_track\">\r\n                        <h4>TRACK ORDER</h4>\r\n                        <p className=\"track\">{orderDetail?.orderNumber}</p>\r\n                        <h4>TOTAL</h4>\r\n                        <p className=\"total\">\r\n                        {orderDetail?.orderItems?.map(order => (\r\n                        order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.totalPrice : ''\r\n                        ))} include taxes\r\n                        </p>\r\n                        {orderDetail?.orderItems[0]?.variants?.Color && <h4>Color</h4>}\r\n                        {orderDetail && <p className=\"orderColor\"> {`${orderDetail?.orderItems?.map(order => (\r\n                            order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.variants?.Color: ''\r\n                        ))}`}\r\n                        </p>}\r\n                        {orderDetail?.orderItems[0]?.variants?.Size && \r\n                        <>\r\n                            <h4>Size</h4>\r\n                            {orderDetail && <p className=\"orderColor\"> {`${orderDetail?.orderItems?.map(order => (\r\n                                order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.variants?.Size: ''\r\n                            ))}`}\r\n                        </p>}\r\n                        </>}\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"tracking_order_status\">\r\n                        {\r\n                        orderDetail?.statusDetails.map(item => (\r\n                            <>\r\n                            <div \r\n                                className={\r\n                                item.status.toLowerCase() === 'returned' \r\n                                ? 'order started return' \r\n                                : 'order started done'\r\n                                }\r\n                            >\r\n                            <h6>{`${item?.status}`}</h6>\r\n                            <p>{`${formatDateTimeProduct(item?.date).formattedDate}`}</p>\r\n                            </div>\r\n                            </>\r\n                        ))\r\n                        }\r\n                    </div>\r\n                </div>}\r\n                </div>\r\n            ))}\r\n            {orderList && <div className='paginationBox'>\r\n                {/* <div className=\"itemsPerPageDropdown\">\r\n                    <label>Items per page: </label>\r\n                    <select value={returnItemsPerPage} onChange={handleReturnItemsPerPageChange}>\r\n                        {returnItemsPerPageOptions.map(option => (\r\n                            <option key={option} value={option}>\r\n                                {option}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div> */}\r\n                {/* Pagination component */}\r\n                <ReactPaginate\r\n                    previousLabel={\"Previous\"}\r\n                    nextLabel={\"Next\"}\r\n                    breakLabel={\"...\"}\r\n                    breakClassName={\"break-me\"}\r\n                    pageCount={Math.max(Math.ceil(returnOrderListCount / returnItemsPerPage), 1)}\r\n                    marginPagesDisplayed={2}\r\n                    pageRangeDisplayed={3}\r\n                    onPageChange={(ev) => handleReturnPageChange(ev)}\r\n                    containerClassName={\"pagination\"}\r\n                    activeClassName={\"active\"}\r\n                    forcePage={returnPage}  // Sync current page with URL\r\n                    disabled={returnOrderListCount === 0} \r\n                />\r\n                </div>\r\n            }\r\n            {!orderList && <p>No orders found.</p>}\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReturnOrders;","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { OrderDetailData, OrderListData } from '../../store/slice/api_integration';\r\nimport { DEFAULT_OPTIONS } from '../../utils/Constants';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { formatDateTimeFormatProduct, formatDateTimeProduct } from '../../utils/FormatDateTime';\r\n\r\nconst CancelledOrders = () => {\r\n    const [cancelPage, setCancelPage] = useState(0);  // Default page 0 (first page)\r\n    const [cancelItemsPerPage, setCancelItemsPerPage] = useState(30);\r\n    const [cancelOrderIndex, setCancelOrderIndex] = useState(null);\r\n    const [isInitialLoad, setIsInitialLoad] = useState({ cancelled: true });\r\n    const { \r\n      orderList, \r\n      orderDetail, \r\n      cancelledOrderListCount = 0,\r\n    } = useSelector((state) => state.cart);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    // =========================================================\r\n    // Pagination code for Cancel order List \r\n    useEffect(() => {\r\n        if(isInitialLoad.cancelled) {\r\n          setIsInitialLoad((prev) => ({\r\n            ...prev,\r\n            cancelled: false,\r\n          }));\r\n          return;\r\n        }\r\n\r\n        // Extract parameters from the URL\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || cancelItemsPerPage;\r\n      \r\n        // Update state with URL parameters\r\n        setCancelPage(pageParam - 1); // Sync pagination (0-based indexing)\r\n        setCancelItemsPerPage(itemsPerPageParam);\r\n      \r\n        // Calculate offset and limit dynamically\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n      \r\n        // Dispatch the API call with updated parameters\r\n        const responseObj = {\r\n          status: 3,\r\n          offset,\r\n          limit\r\n        }\r\n        dispatch(OrderListData(responseObj));\r\n      }, [location.search, cancelItemsPerPage ,dispatch]);  \r\n      \r\n      // Handle dropdown change for itemsPerPage\r\n      const handleCancelItemsPerPageChange = (e) => {\r\n        const newItemsPerPage = parseInt(e.target.value, 10);\r\n        setCancelItemsPerPage(newItemsPerPage);\r\n        setCancelPage(0); // Reset to the first page\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", 1);\r\n        searchParams.set(\"itemsPerPage\", newItemsPerPage);\r\n        navigate(`?${searchParams.toString()}`);\r\n      };\r\n      \r\n      // Handle page change for pagination\r\n      const handleCancelPageChange = (data) => {\r\n        const { selected } = data; // `react-paginate` provides 0-based page index\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", selected + 1); // Convert to 1-based indexing\r\n        navigate(`?${searchParams.toString()}`); // Update URL\r\n      };\r\n  \r\n      // Dropdown options for itemsPerPage\r\n      const cancelItemsPerPageOptions = DEFAULT_OPTIONS.filter(option => option <= cancelledOrderListCount);\r\n    // =========================================================\r\n    //   download PDF\r\n    const downloadPDF = (url) => {\r\n        window.open(url, \"_blank\", \"noopener,noreferrer\");\r\n    };\r\n    const handleCancelledViewOrderDetails = (e, index, order) => {\r\n        e.preventDefault();\r\n        setCancelOrderIndex((prevIndex) => {\r\n          // If closing the current active index, return null to hide details\r\n          if (prevIndex === index) {\r\n            return null;\r\n          }\r\n      \r\n          // If opening a new order, trigger the API call\r\n          if (prevIndex !== index) {\r\n            const responseObj = {\r\n              order_id:order?.order_id,\r\n              type: 3,\r\n            }\r\n            // Call your API function\r\n            dispatch(OrderDetailData(responseObj))\r\n          }\r\n      \r\n          return index;\r\n        });\r\n      };\r\n      const handleNavigateToCancelledOrderDetail = (productList, scroll = false) => {\r\n        if (!productList || productList.length === 0) {\r\n          return;\r\n        }\r\n      \r\n        const product = productList[0];\r\n        if (product?.product_id) {\r\n          // navigate(`/product/${product.product_id}`, { state: { product } });\r\n          if(scroll) {\r\n            navigate(`/product/${product.product_id}`, { state: { product, scrollToBottom: scroll } });\r\n          } else navigate(`/product/${product.product_id}`, { state: { product } });\r\n        } else {\r\n          // console.error(\"Product ID is undefined.\");\r\n        }\r\n      };\r\n      const redirectToSupport = () => {\r\n        navigate(\"/contact\");\r\n      };\r\n  return (\r\n    <>\r\n        <div className=\"orderListWrapper\">\r\n            <div className=\"orderListWrapper\">\r\n              {orderList &&\r\n              orderList?.map((item, index) => (\r\n              <div className=\"orderList\" key={index}>\r\n                  <div className=\"orderDetail\">\r\n                  <div className=\"leftOrder\">\r\n                      <img src={item.product_image} alt={item.product_name} />\r\n                      <div>\r\n                      <h3>{item.product_name}</h3>\r\n                      <p className=\"openReturnWindow\">{`Return window open on ${formatDateTimeProduct(item?.order_status?.Cancelled).formattedDate}`}</p>\r\n                      <p>{`Order # ${item.order_number}`}</p>\r\n                      </div>\r\n                  </div>\r\n                  <div className=\"rightOrder\">\r\n                      {orderDetail?.invoice_url && <div\r\n                      onClick={() => downloadPDF(orderDetail?.invoice_url)}\r\n                      >\r\n                      Invoice\r\n                      </div>}\r\n                      <div\r\n                      className={cancelOrderIndex === index ? \"active\" : \"disabled\"}\r\n                      onClick={() => {\r\n                          const matchingProducts = orderDetail?.orderItems?.filter((order) =>\r\n                          order?.productName?.toLowerCase() === item?.product_name.toLowerCase()\r\n                          );\r\n                          handleNavigateToCancelledOrderDetail(matchingProducts);\r\n                      }}\r\n                      >Buy it again</div>\r\n                      <div onClick={(e) => handleCancelledViewOrderDetails(e, index, item)}>\r\n                      {cancelOrderIndex === index ? \"Hide order details\" : \"View order details\"}\r\n                      </div>\r\n                      <div\r\n                      className={cancelOrderIndex === index ? \"active\" : \"disabled\"}\r\n                      onClick={() => {\r\n                          const matchingProducts = orderDetail?.orderItems?.filter((order) =>\r\n                          order?.productName?.toLowerCase() === item?.product_name.toLowerCase()\r\n                          );\r\n                          handleNavigateToCancelledOrderDetail(matchingProducts, true);\r\n                      }}\r\n                      >write a product review</div>\r\n                      <div onClick={() => redirectToSupport()}>Get product support</div>\r\n                  </div>\r\n                  </div>\r\n                  {orderDetail && <div className={`openOrderDetails ${\r\n                  cancelOrderIndex === index ? \"show\" : \"hide\"\r\n                  }`}>\r\n                  <div className=\"userDetails\">\r\n                      <div className=\"userAddress\">\r\n                      <h6>\r\n                          SHIP To:\r\n                          <span>{orderDetail?.shippingAddress?.name}</span>\r\n                      </h6>\r\n                      <p>{orderDetail?.shippingAddress?.house_number}, {orderDetail?.shippingAddress?.street}</p>\r\n                      <p>{orderDetail?.shippingAddress?.locality}, {orderDetail?.shippingAddress?.country}</p>\r\n                      <p>Postal Code: {orderDetail?.shippingAddress?.postcode}</p>\r\n                      <p>Phone Number: {orderDetail?.shippingAddress?.phone}</p>\r\n                      </div>\r\n                      <div className=\"user_order_details\">\r\n                      {\r\n                          orderDetail?.statusDetails?.map(order => (\r\n                          <>\r\n                              <h4>{order?.status}</h4>\r\n                              <p>{formatDateTimeFormatProduct(order?.date)}</p>\r\n                          </>\r\n                          ))\r\n                      }\r\n                      <h4>TOTAL Quantity</h4>\r\n                      <p>{orderDetail?.orderItems?.map(order => (\r\n                          order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order.quantity: ''\r\n                      ))}</p>\r\n                      </div>\r\n                      <div className=\"user_order_track\">\r\n                      <h4>TRACK ORDER</h4>\r\n                      <p className=\"track\">{orderDetail?.orderNumber}</p>\r\n                      <h4>TOTAL</h4>\r\n                      <p className=\"total\">\r\n                      {orderDetail?.orderItems?.map(order => (\r\n                          order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.totalPrice : ''\r\n                      ))} include taxes\r\n                      </p>\r\n                      {orderDetail?.orderItems[0]?.variants?.Color && <h4>Color</h4>}\r\n                          {orderDetail && <p className=\"orderColor\"> {`${orderDetail?.orderItems?.map(order => (\r\n                              order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.variants?.Color: ''\r\n                          ))}`}\r\n                      </p>}\r\n                      {orderDetail?.orderItems[0]?.variants?.Size && \r\n                          <>\r\n                          <h4>Size</h4>\r\n                          {orderDetail && <p className=\"orderColor\"> {`${orderDetail?.orderItems?.map(order => (\r\n                              order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.variants?.Size: ''\r\n                          ))}`}\r\n                          </p>}\r\n                          </>}\r\n                      </div>\r\n                  </div>\r\n                  <div className=\"tracking_order_status\">\r\n                      {\r\n                          orderDetail?.statusDetails.map(item => (\r\n                          <>\r\n                              <div \r\n                              className={\r\n                                  item.status.toLowerCase() === 'cancelled' \r\n                                  ? 'order started cancel' \r\n                                  : 'order started done'\r\n                              }\r\n                              >\r\n                              <h6>{`${item?.status}`}</h6>\r\n                              <p>{`${formatDateTimeProduct(item?.date).formattedDate}`}</p>\r\n                              </div>\r\n                          </>\r\n                          ))\r\n                      }\r\n                  </div>\r\n                  </div>}\r\n              </div>\r\n              ))}\r\n              {orderList && <div className='paginationBox'>\r\n                  {/* <div className=\"itemsPerPageDropdown\">\r\n                      <label>Items per page: </label>\r\n                      <select value={cancelItemsPerPage} onChange={handleCancelItemsPerPageChange}>\r\n                          {cancelItemsPerPageOptions.map(option => (\r\n                              <option key={option} value={option}>\r\n                                  {option}\r\n                              </option>\r\n                          ))}\r\n                      </select>\r\n                  </div> */}\r\n                  {/* Pagination component */}\r\n                  <ReactPaginate\r\n                      previousLabel={\"Previous\"}\r\n                      nextLabel={\"Next\"}\r\n                      breakLabel={\"...\"}\r\n                      breakClassName={\"break-me\"}\r\n                      pageCount={Math.max(Math.ceil(cancelledOrderListCount / cancelItemsPerPage), 1)}\r\n                      marginPagesDisplayed={2}\r\n                      pageRangeDisplayed={3}\r\n                      onPageChange={(ev) => handleCancelPageChange(ev)}\r\n                      containerClassName={\"pagination\"}\r\n                      activeClassName={\"active\"}\r\n                      forcePage={cancelPage}  // Sync current page with URL\r\n                      disabled={cancelledOrderListCount === 0} \r\n                  />\r\n                </div>\r\n              }\r\n              {!orderList && <p>No orders found.</p>}\r\n            </div>\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CancelledOrders","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { OrderDetailData, OrderListData } from '../../store/slice/api_integration';\r\nimport { DEFAULT_OPTIONS } from '../../utils/Constants';\r\nimport { setCancelOrderModal } from '../../store/slice/cartSlice';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { formatDateTimeFormatProduct, formatDateTimeProduct } from '../../utils/FormatDateTime';\r\n\r\nconst ActiveOrders = () => {\r\n    const [activePage, setActivePage] = useState(0);  // Default page 0 (first page)\r\n    const [activeItemsPerPage, setActiveItemsPerPage] = useState(30);\r\n    const [activeOrderIndex, setActiveOrderIndex] = useState(null);\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const [isInitialLoad, setIsInitialLoad] = useState({ active: true });\r\n    const { \r\n        orderList, \r\n        orderDetail, \r\n        activeOrderListCount = 0, \r\n    } = useSelector((state) => state.cart);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const downloadPDF = (url) => {\r\n        window.open(url, \"_blank\", \"noopener,noreferrer\");\r\n    };\r\n    // Pagination code for Active order List \r\n    useEffect(() => {\r\n        if(isInitialLoad.active) {\r\n        setIsInitialLoad((prev) => ({\r\n            ...prev,\r\n            active: false,\r\n        }));\r\n        return;\r\n        }\r\n        // Extract parameters from the URL\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || activeItemsPerPage;\r\n    \r\n        // Update state with URL parameters\r\n        setActivePage(pageParam - 1); // Sync pagination (0-based indexing)\r\n        setActiveItemsPerPage(itemsPerPageParam);\r\n    \r\n        // Calculate offset and limit dynamically\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n    \r\n        // Dispatch the API call with updated parameters\r\n        const responseObj = {\r\n        status: 1,\r\n        offset,\r\n        limit\r\n        }\r\n        dispatch(OrderListData(responseObj));\r\n    }, [location.search, activeItemsPerPage ,dispatch]);\r\n    \r\n    // Handle dropdown change for itemsPerPage\r\n    const handleActiveItemsPerPageChange = (e) => {\r\n        const newItemsPerPage = parseInt(e.target.value, 10);\r\n        setActiveItemsPerPage(newItemsPerPage);\r\n        setActivePage(0); // Reset to the first page\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", 1);\r\n        searchParams.set(\"itemsPerPage\", newItemsPerPage);\r\n        navigate(`?${searchParams.toString()}`);\r\n    };\r\n    \r\n    // Handle page change for pagination\r\n    const handleActivePageChange = (data) => {\r\n        const { selected } = data; // `react-paginate` provides 0-based page index\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", selected + 1); // Convert to 1-based indexing\r\n        navigate(`?${searchParams.toString()}`); // Update URL\r\n    };\r\n\r\n    // Dropdown options for itemsPerPage\r\n    const activeItemsPerPageOptions = DEFAULT_OPTIONS.filter(option => option <= activeOrderListCount);\r\n    // =========================================================\r\n    const handleActiveViewOrderDetails = (e, index, order) => {\r\n        e.preventDefault();\r\n        setActiveOrderIndex((prevIndex) => {\r\n          // If closing the current active index, return null to hide details\r\n          if (prevIndex === index) {\r\n            return null;\r\n          }\r\n      \r\n          // If opening a new order, trigger the API call\r\n          if (prevIndex !== index) {\r\n            const responseObj = {\r\n              order_id:order?.order_id,\r\n              type: 1,\r\n            }\r\n            // Call your API function\r\n            dispatch(OrderDetailData(responseObj))\r\n          }\r\n      \r\n          return index;\r\n        });\r\n      };\r\n      const handleNavigateToDetail = (productList, scroll = false) => {\r\n        if (!productList || productList.length === 0) {\r\n          return;\r\n        }\r\n      \r\n        const product = productList[0];\r\n        if (product?.product_id) {\r\n          // navigate(`/product/${product.product_id}`, { state: { product } });\r\n          if(scroll) {\r\n            navigate(`/product/${product.product_id}`, { state: { product, scrollToBottom: scroll } });\r\n          } else navigate(`/product/${product.product_id}`, { state: { product } });\r\n        } else {\r\n        //   console.error(\"Product ID is undefined.\");\r\n        }\r\n      };\r\n      const redirectToSupport = () => {\r\n        navigate(\"/contact\");\r\n      };\r\n      const handleCancelOrder = (e, item, returnStatus) => {\r\n        const cancelOrderPayload = { \r\n          isOpen: isOpen,\r\n          orderId: item.order_id,\r\n          skuId: item.sku_id,\r\n          returnStatus,\r\n          status: 1,\r\n        };\r\n        // dispatch(toggleCategoryModal(cancelOrderPayload));\r\n        dispatch(setCancelOrderModal(cancelOrderPayload))\r\n        // setActiveOrderIndex(null);\r\n      }\r\n      if(orderDetail) {\r\n          const formattedActiveEstDeliveryDate = formatDateTimeProduct(orderDetail?.estimatedDeliveryDate);\r\n      }\r\n      \r\n  return (\r\n    <>\r\n        <div className=\"orderListWrapper\">\r\n            {orderList &&\r\n            orderList?.map((item, index) => (\r\n                <div className=\"orderList\" key={index}>\r\n                <div className=\"orderDetail\">\r\n                    <div className=\"leftOrder\">\r\n                    <img src={item.product_image} alt={item.product_name} />\r\n                    <div>\r\n                        <h3>{item.product_name}</h3>\r\n                        <p className=\"openReturnWindow\">{`Return window open on ${formatDateTimeFormatProduct(item.return_date)}`}</p>\r\n                        <p>{`Order # ${item.order_number}`}</p>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"rightOrder\">\r\n                        {orderDetail?.invoice_url && <div\r\n                            onClick={() => downloadPDF(orderDetail?.invoice_url)}\r\n                        >\r\n                            Invoice\r\n                        </div>}\r\n                        {orderDetail && <div\r\n                            className={activeOrderIndex === index ? \"active\" : \"disabled\"}\r\n                            onClick={() => {\r\n                            const matchingProducts = orderDetail?.orderItems?.filter((order) =>\r\n                                order?.productName?.toLowerCase() === item?.product_name.toLowerCase()\r\n                            );\r\n                            handleNavigateToDetail(matchingProducts);\r\n                            }}\r\n                        >\r\n                            Buy it again\r\n                        </div>}\r\n                        <div onClick={(e) => handleActiveViewOrderDetails(e, index, item)}>\r\n                            {activeOrderIndex === index ? \"Hide order details\" : \"View order details\"}\r\n                        </div>\r\n                        {orderDetail && <div\r\n                            className={activeOrderIndex === index ? \"active\" : \"disabled\"}\r\n                            onClick={() => {\r\n                            const matchingProducts = orderDetail?.orderItems?.filter((order) =>\r\n                                order?.productName?.toLowerCase() === item?.product_name.toLowerCase()\r\n                            );\r\n                            handleNavigateToDetail(matchingProducts, true);\r\n                            }}\r\n                        >write a product review</div>}\r\n                        <div onClick={() => redirectToSupport()}>Get product support</div>\r\n                        {orderDetail && <div \r\n                            className={activeOrderIndex === index ? \"active\" : \"disabled\"}\r\n                            onClick={(e) => handleCancelOrder(e, item, orderDetail.returnStatus)}\r\n                        >\r\n                            {\"Cancel Order\"}\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n                {orderDetail && <div className={`openOrderDetails ${\r\n                    activeOrderIndex === index ? \"show\" : \"hide\"\r\n                    }`}>\r\n                    {orderDetail && <div className=\"expectedDelivery\">\r\n                        <h4>Expected Delivery</h4>\r\n                        <p>{formatDateTimeProduct(orderDetail?.estimatedDeliveryDate) \r\n                                ? `${formatDateTimeProduct(orderDetail?.estimatedDeliveryDate).fullDay}, \r\n                                    ${formatDateTimeProduct(orderDetail?.estimatedDeliveryDate).formattedDate}`: ''}</p>\r\n                    </div>}\r\n                    <div className=\"userDetails\">\r\n                    <div className=\"userAddress\">\r\n                        <h6>\r\n                        SHIP To:\r\n                        <span>{orderDetail?.shippingAddress?.name}</span>\r\n                        </h6>\r\n                        <p>{orderDetail?.shippingAddress?.house_number}, {orderDetail?.shippingAddress?.street}</p>\r\n                        <p>{orderDetail?.shippingAddress?.locality}, {orderDetail?.shippingAddress?.country}</p>\r\n                        <p>Postal Code: {orderDetail?.shippingAddress?.postcode}</p>\r\n                        <p>Phone Number: {orderDetail?.shippingAddress?.phone}</p>\r\n                    </div>\r\n                    <div className=\"user_order_details\">\r\n                        <h4>{orderDetail?.statusDetails[0]?.status}</h4>\r\n                        <p>{formatDateTimeFormatProduct(orderDetail?.statusDetails[0]?.date)}</p>\r\n                        <h4>Expected Delivery Date</h4>\r\n                        <p>{orderDetail?.estimatedDeliveryDate}</p>\r\n                        <h4>TOTAL Quantity</h4>\r\n                        <p>{orderDetail?.orderItems?.map(order => (\r\n                            order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order.quantity: ''\r\n                        ))}</p>\r\n                    </div>\r\n                    <div className=\"user_order_track\">\r\n                        <h4>TRACK ORDER</h4>\r\n                        <p className=\"track\">{orderDetail?.orderNumber}</p>\r\n                        <h4>TOTAL INVOICE</h4>\r\n                        <p className=\"total\">\r\n                        £ {orderDetail?.orderItems?.map(order => (\r\n                        order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.totalPrice : ''\r\n                        ))}\r\n                        </p>\r\n                        {orderDetail?.orderItems[0]?.variants?.Size && <h4>Color</h4>}\r\n                        {orderDetail && <p className=\"orderColor\"> {`${orderDetail?.orderItems?.map(order => (\r\n                            order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.variants?.Color: ''\r\n                        ))}`}\r\n                        </p>}\r\n                        {orderDetail?.orderItems[0]?.variants?.Size && \r\n                        <>\r\n                            <h4>Size</h4>\r\n                            {orderDetail?.orderItems[0]?.variants?.Size && <p className=\"orderColor\"> {`${orderDetail?.orderItems?.map(order => (\r\n                                order?.productName.toLowerCase() === item?.product_name.toLowerCase() ? order?.variants?.Size: ''\r\n                            ))}`}\r\n                        </p>}\r\n                        </>}\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"tracking_order_status\">\r\n                        {\r\n                        orderDetail?.statusDetails.map((item, index) => (\r\n                            <>\r\n                            <div className=\"order started done\">\r\n                            <h6>{`${item?.status}`}</h6>\r\n                            <p>{`${formatDateTimeProduct(item?.date).formattedDate}`}</p>\r\n                            </div>\r\n                            </>\r\n                        ))\r\n                        }\r\n                    </div>\r\n                </div>}\r\n                </div>\r\n            ))}\r\n            {orderList && <div className='paginationBox'>\r\n                    {/* <div className=\"itemsPerPageDropdown\">\r\n                        <label>Items per page: </label>\r\n                        <select value={activeItemsPerPage} onChange={handleActiveItemsPerPageChange}>\r\n                            {activeItemsPerPageOptions.map(option => (\r\n                                <option key={option} value={option}>\r\n                                    {option}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div> */}\r\n                    {/* Pagination component */}\r\n                    <ReactPaginate\r\n                        previousLabel={\"Previous\"}\r\n                        nextLabel={\"Next\"}\r\n                        breakLabel={\"...\"}\r\n                        breakClassName={\"break-me\"}\r\n                        pageCount={Math.max(Math.ceil(activeOrderListCount / activeItemsPerPage), 1)}\r\n                        marginPagesDisplayed={2}\r\n                        pageRangeDisplayed={3}\r\n                        onPageChange={(ev) => handleActivePageChange(ev)}\r\n                        containerClassName={\"pagination\"}\r\n                        activeClassName={\"active\"}\r\n                        forcePage={activePage}  // Sync current page with URL\r\n                        disabled={activeOrderListCount === 0} \r\n                    />\r\n                </div>\r\n            }\r\n            {!orderList && <p>No orders found.</p>}\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(ActiveOrders)","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { addListAddress, defaultListAddress, deleteListAddress, getListAddress, updateListAddress } from '../../store/slice/api_integration';\r\nimport { DEFAULT_OPTIONS } from '../../utils/Constants';\r\nimport { Button } from '@mui/material';\r\nimport ReactPaginate from 'react-paginate';\r\nimport './Address.css';\r\n\r\nconst Address = () => {\r\n    const [isInitialAddressLoad, setIsInitialAddressLoad] = useState(true);\r\n    const [page, setPage] = useState(0);  // Default page 0 (first page)\r\n    const [itemsPerPage, setItemsPerPage] = useState(30);\r\n    \r\n    const { totalAddressCount = 0 } = useSelector((state) => state.product);\r\n    const { user } = useSelector((state) => state.user);\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    // Address Form\r\n  //   ======================================================================================================================\r\n\r\n  const [isEditingAddress, setIsEditingAddress] = useState(false);\r\n  const [addressFormData, setAddressFormData] = useState({\r\n    id: \"\",\r\n    fullName: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    house_no: \"\",\r\n    address: \"\",\r\n    country: \"\",\r\n    city: \"\",\r\n    pincode: \"\",\r\n    isDefault: false,\r\n  });\r\n  const [formErrors, setFormErrors] = useState({});\r\n\r\n  const handleAddressInputMobileChange = (e) => {\r\n    const { name, value } = e.target;\r\n    let updatedValue = value;\r\n    if (/^\\d+$/.test(value) && !value.startsWith(\"+44\")) {\r\n      updatedValue = `+44${value}`;\r\n      setAddressFormData({ ...addressFormData, [name]: updatedValue });\r\n    } else {\r\n      setAddressFormData({ ...addressFormData, [name]: value });\r\n    }\r\n    setFormErrors({ ...formErrors, [name]: \"\" });\r\n  }\r\n  const handleAddressInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setAddressFormData({ ...addressFormData, [name]: value });\r\n    setFormErrors({ ...formErrors, [name]: \"\" }); // Clear error on input change\r\n  };\r\n\r\n  const validateAddressFields = () => {\r\n    const newErrors = {};\r\n    if (!addressFormData.address.trim())\r\n      newErrors.address = \"Address is required.\";\r\n    if (!addressFormData.country.trim())\r\n      newErrors.country = \"Country is required.\";\r\n    if (!addressFormData.city.trim()) newErrors.city = \"City is required.\";\r\n    if (!addressFormData.house_no.trim()) newErrors.house_no = \"House Number is required.\";\r\n    if (!/^[A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2}$/i.test(addressFormData.pincode))\r\n      newErrors.pincode = \"Invalid UK postal code.\";\r\n    return newErrors;\r\n  };\r\n\r\n  const validateAllFields = () => {\r\n    const newErrors = {};\r\n    if (!addressFormData.fullName.trim())\r\n      newErrors.fullName = \"Full Name is required.\";\r\n    if (\r\n      !addressFormData.email.trim() ||\r\n      !/\\S+@\\S+\\.\\S+/.test(addressFormData.email)\r\n    )\r\n      newErrors.email = \"Invalid email address.\";\r\n    if (\r\n      !addressFormData.phone.trim() ||\r\n      !/^\\+44\\d{10}$/.test(addressFormData.phone)\r\n    )\r\n      newErrors.phone = \"Phone number must be in the format +44XXXXXXXXXX (UK format).\";\r\n    const addressErrors = validateAddressFields();\r\n    return { ...newErrors, ...addressErrors };\r\n  };\r\n\r\n  const handleAddressSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newErrors = validateAllFields();\r\n    const responseObj = {\r\n      full_name: addressFormData.fullName,\r\n      mobile: addressFormData.phone,\r\n      email: addressFormData.email,\r\n      house_number: addressFormData.house_no,\r\n      street: addressFormData.address,\r\n      locality: addressFormData.city,\r\n      postcode: addressFormData.pincode,\r\n      country: addressFormData.country,\r\n      ...(isEditingAddress && { id: addressFormData.id }) // Add id only if editing\r\n    };\r\n    if (Object.keys(newErrors).length === 0) {\r\n      if(isEditingAddress) {\r\n        dispatch(updateListAddress(responseObj));\r\n      } else {\r\n        dispatch(addListAddress(responseObj));\r\n      }\r\n      // Clear form after successful submission\r\n      setAddressFormData({\r\n        id: \"\",\r\n        fullName: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        password: \"\",\r\n        address: \"\",\r\n        country: \"\",\r\n        city: \"\",\r\n        state: \"\",\r\n        pincode: \"\",\r\n        house_no: \"\",\r\n        isDefault: false,\r\n      });\r\n      setIsEditingAddress(false);\r\n    } else {\r\n      setFormErrors(newErrors);\r\n    }\r\n  };\r\n\r\n  const handleDeleteAddress = (addressId) => {\r\n    const responseObj = { id: addressId }\r\n    dispatch(deleteListAddress(responseObj));\r\n    // alert(\"Address deleted successfully!\");\r\n  };\r\n\r\n  const handleSetDefaultAddress = (addressId) => {\r\n    const responseObj = { id: addressId }\r\n    dispatch(defaultListAddress(responseObj)).finally(() => {\r\n      dispatch(getListAddress(responseObj));\r\n    });\r\n  };\r\n\r\n  const handleEditAddress = (address) => {\r\n    window.scrollTo({\r\n      top: 100,\r\n      behavior: 'smooth', // Adds smooth scrolling\r\n    });\r\n    const editAddressObj = {\r\n      id: address.id,\r\n      fullName: address?.full_name?.trim(),\r\n      phone: address?.mobile?.trim(),\r\n      email: address?.email?.trim(),\r\n      house_no: address?.house_number?.trim(),\r\n      address: address?.street?.trim(),\r\n      city: address?.locality?.trim(),\r\n      pincode: address?.postcode?.trim(),\r\n      country: address?.country?.trim(),\r\n      isDefault: false,\r\n    }\r\n    setAddressFormData({ ...editAddressObj }); // Populate form with selected address\r\n    setIsEditingAddress(true); // Set the form to edit mode\r\n  };\r\n\r\n  // ======================================================================================================================\r\n\r\n\r\n    // Pagination code for Address Lists\r\n    useEffect(() => {\r\n        if(isInitialAddressLoad) {\r\n          setIsInitialAddressLoad(false);\r\n          return;\r\n        }\r\n        // Extract parameters from the URL\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || itemsPerPage;\r\n      \r\n        // Update state with URL parameters\r\n        setPage(pageParam - 1); // Sync pagination (0-based indexing)\r\n        setItemsPerPage(itemsPerPageParam);\r\n      \r\n        // Calculate offset and limit dynamically\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n      \r\n        // Dispatch the API call with updated parameters\r\n        const responseObj = {\r\n          offset,\r\n          limit\r\n        }\r\n        dispatch(getListAddress(responseObj));\r\n      }, [location.search, itemsPerPage ,dispatch]);\r\n      \r\n      // Handle dropdown change for itemsPerPage\r\n      const handleItemsPerPageChange = (e) => {\r\n        const newItemsPerPage = parseInt(e.target.value, 10);\r\n        setItemsPerPage(newItemsPerPage);\r\n        setPage(0); // Reset to the first page\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", 1);\r\n        searchParams.set(\"itemsPerPage\", newItemsPerPage);\r\n        navigate(`?${searchParams.toString()}`);\r\n      };\r\n      \r\n      // Handle page change for pagination\r\n      const handlePageChange = (data) => {\r\n        const { selected } = data; // `react-paginate` provides 0-based page index\r\n        const searchParams = new URLSearchParams(location.search);\r\n        searchParams.set(\"page\", selected + 1); // Convert to 1-based indexing\r\n        navigate(`?${searchParams.toString()}`); // Update URL\r\n      };\r\n  \r\n      // Dropdown options for itemsPerPage\r\n      const itemsPerPageOptions = DEFAULT_OPTIONS.filter(option => option <= totalAddressCount);\r\n  \r\n  return (\r\n    <>\r\n        <div className=\"addressBox\">\r\n            <div className='parentAddressBox'>\r\n              <div className=\"addressForm\">\r\n                <h3>Add addresses for orders </h3>\r\n                <form onSubmit={handleAddressSubmit}>\r\n                    <div className=\"box\">\r\n                    <div className=\"form-control\">\r\n                        <label>Full name (First and Last name)</label>\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"fullName\"\r\n                        value={addressFormData.fullName}\r\n                        onChange={handleAddressInputChange}\r\n                        />\r\n                        {formErrors.fullName && (\r\n                        <p className=\"error\">{formErrors.fullName}</p>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"form-control\">\r\n                        <label>Mobile Number</label>\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"phone\"\r\n                        value={addressFormData.phone}\r\n                        onChange={handleAddressInputMobileChange}\r\n                        />\r\n                        {formErrors.phone && (\r\n                        <p className=\"error\">{formErrors.phone}</p>\r\n                        )}\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"box\">\r\n                    <div className=\"form-control\">\r\n                        <label>Email</label>\r\n                        <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        value={addressFormData.email}\r\n                        onChange={handleAddressInputChange}\r\n                        />\r\n                        {formErrors.email && (\r\n                        <p className=\"error\">{formErrors.email}</p>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"form-control\">\r\n                        <label>House Number</label>\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"house_no\"\r\n                        value={addressFormData.house_no}\r\n                        onChange={handleAddressInputChange}\r\n                        />\r\n                        {formErrors.house_no && (\r\n                        <p className=\"error\">{formErrors.house_no}</p>\r\n                        )}\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"box\">\r\n                    <div className=\"form-control\">\r\n                        <label>Full Address</label>\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"address\"\r\n                        value={addressFormData.address}\r\n                        onChange={handleAddressInputChange}\r\n                        />\r\n                        {formErrors.address && (\r\n                        <p className=\"error\">{formErrors.address}</p>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"form-control\">\r\n                        <label>Town/City</label>\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"city\"\r\n                        value={addressFormData.city}\r\n                        onChange={handleAddressInputChange}\r\n                        />\r\n                        {formErrors.city && (\r\n                        <p className=\"error\">{formErrors.city}</p>\r\n                        )}\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"box\">\r\n                    <div className=\"form-control\">\r\n                        <label>Postal code</label>\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"pincode\"\r\n                        value={addressFormData.pincode}\r\n                        onChange={handleAddressInputChange}\r\n                        />\r\n                        {formErrors.pincode && (\r\n                        <p className=\"error\">{formErrors.pincode}</p>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"form-control\">\r\n                        <label>Country/Region</label>\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"country\"\r\n                        value={addressFormData.country}\r\n                        onChange={handleAddressInputChange}\r\n                        />\r\n                        {formErrors.country && (\r\n                        <p className=\"error\">{formErrors.country}</p>\r\n                        )}\r\n                    </div>\r\n                    </div>\r\n                    <button type=\"submit\">{isEditingAddress ? \"Update Address\" : \"Save Address\"}</button>\r\n                </form>\r\n              </div>\r\n              <div className=\"saveAddressWrapper\">\r\n                <h3>Edit, Remove and set as default addresses for orders </h3>\r\n                <div className=\"addressList\">\r\n                  {user[0].addresses ? (\r\n                      <ul>\r\n                      {user[0].addresses.map((address) => (\r\n                          <li key={address.id}>\r\n                          <h4>{address.full_name}</h4>\r\n                          <p className=\"address\">\r\n                              Full Address: {address.house_number}, {address.street}, {address.country},\r\n                              {address.postcode}\r\n                          </p>\r\n                          <p>Email: {address.email}</p>\r\n                          <p>Phone Number: {address.mobile}</p>\r\n                          <div className=\"action\">\r\n                              <p onClick={() => handleEditAddress(address)}>\r\n                              Edit |\r\n                              </p>\r\n                              <p onClick={() => handleDeleteAddress(address.id)}>\r\n                              Remove |\r\n                              </p>\r\n                              <p\r\n                              onClick={() => handleSetDefaultAddress(address.id)}\r\n                              className={address.isDefault === \"True\" ? \"default\" : \"\"}\r\n                              >\r\n                              {address.isDefault === \"True\" ? \"Default\" : \"Set as Default\"}\r\n                              </p>\r\n                          </div>\r\n                          </li>\r\n                      ))}\r\n                      </ul>\r\n                  ) : (\r\n                      <p className='noAddressFound'>No Address found!</p>\r\n                  )}\r\n                </div>\r\n                {user[0]?.addresses?.length > 0 && <div className='paginationBox'>\r\n                  {/* <div className=\"itemsPerPageDropdown\">\r\n                      <label>Items per page: </label>\r\n                      <select value={itemsPerPage} onChange={handleItemsPerPageChange}>\r\n                          {itemsPerPageOptions.map(option => (\r\n                              <option key={option} value={option}>\r\n                                  {option}\r\n                              </option>\r\n                          ))}\r\n                      </select>\r\n                  </div> */}\r\n                  {/* Pagination component */}\r\n                  <ReactPaginate\r\n                      previousLabel={\"Previous\"}\r\n                      nextLabel={\"Next\"}\r\n                      breakLabel={\"...\"}\r\n                      breakClassName={\"break-me\"}\r\n                      pageCount={Math.max(Math.ceil(totalAddressCount / itemsPerPage), 1)}\r\n                      marginPagesDisplayed={2}\r\n                      pageRangeDisplayed={3}\r\n                      onPageChange={(ev) => handlePageChange(ev)}\r\n                      containerClassName={\"pagination\"}\r\n                      activeClassName={\"active\"}\r\n                      forcePage={page}  // Sync current page with URL\r\n                      disabled={totalAddressCount === 0} \r\n                  />\r\n                    </div>\r\n                }\r\n              </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Address","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { setChangePassword } from \"../../store/slice/userSlice\";\r\nimport \"./Profile.css\";\r\nimport InputField from \"../../components/InputBox/InputBox\";\r\nimport { \r\n    CONFIRM_PASSWORD, \r\n    CONFIRM_PASSWORD_LABEL, \r\n    NEW_PASSWORD, \r\n    NEW_PASSWORD_ENTER, \r\n    NEW_PASSWORD_LABEL, \r\n    OLD_PASSWORD, \r\n    OLD_PASSWORD_ENTER, \r\n    OLD_PASSWORD_LABEL, \r\n    PASSWORD, \r\n    PASSWORD_NOT_MATCH_ERROR, \r\n    PASSWORD_TYPE \r\n  } from \"../../utils/Constants\";\r\nimport { \r\n    changePasswordRequest, \r\n    getListAddress, \r\n    getListOfWhistListData, \r\n    getOfferList, \r\n    getUserRequest, \r\n    getUserReviewProductData, \r\n    OrderListData, \r\n    updateProfileRequest, \r\n} from \"../../store/slice/api_integration\";\r\nimport Notifications from \"../Notifications/Notifications\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport Wishlist from \"../Wishlist/Wishlist\";\r\nimport Coupens from \"../Coupens/Coupens\";\r\nimport Reviews from \"../Reviews/Reviews\";\r\nimport { setOrderListResponse } from \"../../store/slice/cartSlice\";\r\nimport DeliveredOrders from \"../DeliveredOrders/DeliveredOrders\";\r\nimport ReturnOrders from \"../ReturnOrders/ReturnOrders\";\r\nimport CancelledOrders from \"../CancelledOrders/CancelledOrders\";\r\nimport ActiveOrders from \"../ActiveOrders/ActiveOrders\";\r\nimport Address from \"../Address/Address\";\r\n\r\nconst Profile = () => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [activeOrderTab, setActiveOrderTab] = useState(0);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [page, setPage] = useState(0);  // Default page 0 (first page)\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [wishListPage, setWishListPage] = useState(0);  // Default page 0 (first page)\r\n  const [wishListItemsPerPage, setWishListItemsPerPage] = useState(1);\r\n  const [reviewPage, setReviewPage] = useState(0);  // Default page 0 (first page)\r\n  const [activePage, setActivePage] = useState(0);  // Default page 0 (first page)\r\n  const [activeItemsPerPage, setActiveItemsPerPage] = useState(10);\r\n  const [returnPage, setReturnPage] = useState(0);  // Default page 0 (first page)\r\n  const [returnItemsPerPage, setReturnItemsPerPage] = useState(10);\r\n  const [cancelPage, setCancelPage] = useState(0);  // Default page 0 (first page)\r\n  const [cancelItemsPerPage, setCancelItemsPerPage] = useState(10);\r\n  const [deliveredPage, setDeliveredPage] = useState(0);  // Default page 0 (first page)\r\n  const [deliveredItemsPerPage, setDeliveredItemsPerPage] = useState(10);\r\n  \r\n  // const [activeOrderIndex, setActiveOrderIndex] = useState(null);\r\n  // const [returnOrderIndex, setReturnOrderIndex] = useState(null);\r\n  // const [cancelOrderIndex, setCancelOrderIndex] = useState(null);\r\n  // const [deliveredOrderIndex, setDeliveredOrderIndex] = useState(null);\r\n  const [activeOrderLoading, setActiveOrderLoading] = useState(false);\r\n  const [returnOrderLoading, setReturnOrderLoading] = useState(false);\r\n  const [cancelledOrderLoading, setCancelledOrderLoading] = useState(false);\r\n  const [deliveredOrderLoading, setDeliveredOrderLoading] = useState(false);\r\n  const [addressLoading, setAddressLoading] = useState(false);\r\n\r\n  const { user, changePassword } = useSelector((state) => state.user);\r\n  const { loading } = useSelector((state) => state.modal);\r\n  \r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  const { profile_pic, email, mobile } = user[0]?.data || {};\r\n  const fullname = user[0]?.data?.first_name + \" \" + user[0]?.data?.last_name;\r\n  \r\n  const [errorFileType, setErrorFileType] = useState(\"\");\r\n  const [imagePreview, setImagePreview] = useState(\"\");\r\n  const [imageFile, setImageFile] = useState(null);\r\n\r\n  // Function to handle image upload and preview\r\n  const handleImageUpload = (e) => {\r\n    setErrorFileType(\"\");\r\n    const file = e.target.files[0]; // Get the uploaded file\r\n\r\n    if (file && file.type.startsWith(\"image/\")) {\r\n      // Create a preview URL for the image\r\n      const imageUrl = URL.createObjectURL(file);\r\n      setImagePreview(imageUrl);\r\n      setImageFile(file);\r\n    } else {\r\n      setErrorFileType(\"Please upload a valid image file\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(user.length > 0) dispatch(getUserRequest());\r\n    else navigate(\"/\");\r\n  }, [])\r\n\r\n// ==============================================================\r\nconst [password, setPassword] = useState(\"\");\r\nconst [confirmPassword, setConfirmPassword] = useState(\"\");\r\nconst [passwordError, setPasswordError] = useState(\"\"); // Error for new password\r\nconst [confirmPasswordError, setConfirmPasswordError] = useState(\"\");\r\nconst [isPasswordValid, setIsPasswordValid] = useState(true);\r\n\r\nconst validatePasswordLength1 = (password) => {\r\n  const passwordRegex =\r\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n  return passwordRegex.test(password);\r\n};\r\nconst handleFormPasswordChange = (e) => {\r\n  const newPassword = e.target.value;\r\n  setPassword(newPassword);\r\n  \r\n  if (!validatePasswordLength1(newPassword)) {\r\n    setPasswordError(PASSWORD);\r\n    setIsPasswordValid(false);\r\n  } else {\r\n    setPasswordError(\"\");\r\n    setIsPasswordValid(true);\r\n    if (confirmPassword && newPassword !== confirmPassword) {\r\n      setConfirmPasswordError(PASSWORD_NOT_MATCH_ERROR);\r\n    } else {\r\n      setConfirmPasswordError(\"\");\r\n    }\r\n  }\r\n  dispatch(setChangePassword({ newPassword: newPassword }));\r\n};\r\n\r\nconst handleConfirmPasswordChange = (e) => {\r\n  const confirmPasswordValue = e.target.value;\r\n  setConfirmPassword(confirmPasswordValue);\r\n\r\n  // Check if passwords match\r\n  if (confirmPasswordValue !== password) {\r\n    setConfirmPasswordError(PASSWORD_NOT_MATCH_ERROR);\r\n  } else {\r\n    setConfirmPasswordError(\"\");\r\n  }\r\n  dispatch(setChangePassword({ confirmPassword: confirmPasswordValue }));\r\n};\r\n\r\nconst handlePasswordUpdateSubmit = (e) => {\r\n  e.preventDefault();\r\n  \r\n  if (isPasswordValid && password === confirmPassword) {\r\n   \r\n    const responseObj = {\r\n      old_password: changePassword.oldPassword,\r\n      new_password: changePassword.newPassword,\r\n      confirm_password: changePassword.confirmPassword,\r\n    }\r\n    dispatch(changePasswordRequest(responseObj)).finally(() => {\r\n      dispatch(getUserRequest())\r\n    });\r\n    setPassword(\"\");\r\n    setConfirmPassword(\"\");\r\n    dispatch(setChangePassword({ oldPassword: \"\", newPassword: \"\", confirmPassword: \"\" }))\r\n    // Handle form submission\r\n  } \r\n};\r\n// ==============================================================\r\n\r\n  const [formData, setFormData] = useState({\r\n    fullName: fullname || \"\",\r\n    email: email || \"\",\r\n    phone: mobile || \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  \r\n  useEffect(() => {\r\n    if (user && user[0]) {\r\n      setFormData({\r\n        fullName: fullname || \"\",\r\n        email: email || \"\",\r\n        phone: mobile || \"\",\r\n      });\r\n    }\r\n  }, [user, fullname, email, mobile]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    let updatedValue = value;\r\n    if (/^\\d+$/.test(value) && !value.startsWith(\"+44\")) {\r\n      updatedValue = `+44${value}`;\r\n      setFormData({ ...formData, [name]: updatedValue });\r\n    } else {\r\n      setFormData({ ...formData, [name]: value });\r\n    }\r\n    \r\n    setErrors({ ...errors, [name]: \"\" });\r\n  };\r\n\r\n  const validateInputs = () => {\r\n    const newErrors = {};\r\n    if (!formData.fullName || formData.fullName.trim() === \"\") {\r\n      newErrors.fullName = \"Full Name is required.\";\r\n    }\r\n\r\n    // Validate email format\r\n    if (!formData.email || !/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n      newErrors.email = \"Invalid email address.\";\r\n    }\r\n\r\n    // Ensure phone number is exactly 10 digits\r\n    if (!formData.phone || !/^\\+44\\d{10}$/.test(formData.phone)) {\r\n      newErrors.phone = \"Phone number must be in the format +44XXXXXXXXXX (UK format).\";\r\n    }\r\n\r\n    return newErrors;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newErrors = validateInputs();\r\n    if (Object.keys(newErrors).length === 0) {\r\n      // dispatch(setUser(formData));\r\n      const [firstName, ...restName] = formData.fullName.trim().split(\" \");\r\n      const lastName = restName.join(\" \");\r\n      const responseObj = {\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        mobile: formData.phone,\r\n        email: formData.email,\r\n        profile_pic: imageFile\r\n      }\r\n      dispatch(updateProfileRequest(responseObj)).finally(() => {\r\n        dispatch(getUserRequest())\r\n      });\r\n    } else {\r\n      setErrors(newErrors);\r\n    }\r\n  };\r\n  \r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    dispatch(setChangePassword({ ...changePassword, [name]: value }));\r\n  };\r\n\r\n  const validatePasswordLength = (value) => {\r\n    const passwordRegex =\r\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n  \r\n  return passwordRegex.test(value)\r\n    ? \"\"\r\n    : PASSWORD;\r\n  };\r\n  \r\n  const handleActiveTabs = (value) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n    // Clear query parameters for cleaner URL\r\n    if (value !== 2 && value !== 5) {\r\n      navigate(location.pathname); // Reset URL without parameters\r\n    }\r\n    if (value === 2) {\r\n      setAddressLoading(true);\r\n      navigate(location.pathname);\r\n      const pageParam = parseInt(searchParams.get('page'), 10) || 1;\r\n      setPage(pageParam - 1); // Set initial page based on URL\r\n  \r\n      const offset = (pageParam - 1) * itemsPerPage; // Adjust offset\r\n      const limit = itemsPerPage;\r\n  \r\n      const responseObj = {\r\n        offset,\r\n        limit,\r\n      };\r\n      dispatch(getListAddress(responseObj)).finally(() => {\r\n        setAddressLoading(false);\r\n      });\r\n    }\r\n    if (value === 4) {\r\n      dispatch(getOfferList());\r\n    }\r\n    if (value === 5) {\r\n      navigate(location.pathname);\r\n      const pageParam = parseInt(searchParams.get('wishListPage'), 10) || 1;\r\n      setWishListPage(pageParam - 1); // Set initial page based on URL\r\n  \r\n      const offset = (pageParam - 1) * wishListItemsPerPage; // Adjust offset\r\n      const limit = wishListItemsPerPage;\r\n  \r\n      const responseObj = {\r\n        offset,\r\n        limit,\r\n      };\r\n      dispatch(getListOfWhistListData(responseObj));\r\n    }\r\n    if (value === 3) {\r\n      navigate(location.pathname);\r\n      const pageParam = parseInt(searchParams.get('page'), 10) || 1;\r\n      setReviewPage(pageParam - 1); // Set initial page based on URL\r\n  \r\n      const offset = (pageParam - 1) * itemsPerPage; // Adjust offset\r\n      const limit = itemsPerPage;\r\n  \r\n      const responseObj = {\r\n        offset,\r\n        limit,\r\n      };\r\n      dispatch(getUserReviewProductData(responseObj));\r\n    }\r\n    if ( value === 1) {\r\n      setActiveOrderLoading(true);\r\n      const searchParams = new URLSearchParams(location.search);\r\n      const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n      const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || activeItemsPerPage;\r\n    \r\n      // Update state with URL parameters\r\n      setActivePage(pageParam - 1); // Sync pagination (0-based indexing)\r\n      setActiveItemsPerPage(itemsPerPageParam);\r\n    \r\n      // Calculate offset and limit dynamically\r\n      const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n      const limit = itemsPerPageParam;\r\n    \r\n      // Dispatch the API call with updated parameters\r\n      const responseObj = {\r\n        status: 1,\r\n        offset,\r\n        limit\r\n      }\r\n      dispatch(OrderListData(responseObj)).finally(() => {\r\n        setActiveOrderLoading(false);\r\n      });\r\n    }\r\n    setActiveTab(value); // Update active tab\r\n  };\r\n  // =========================================================\r\n\r\n    const handleActiveOrderTab = (value) => {\r\n      // status - 1 for Active Order\r\n      if(value === 0) {\r\n        // setActiveOrderIndex(null);\r\n        // setReturnOrderIndex(null);\r\n        // setCancelOrderIndex(null);\r\n        // setDeliveredOrderIndex(null);\r\n        setActiveOrderLoading(true);\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || activeItemsPerPage;\r\n      \r\n        // Update state with URL parameters\r\n        setActivePage(pageParam - 1); // Sync pagination (0-based indexing)\r\n        setActiveItemsPerPage(itemsPerPageParam);\r\n      \r\n        // Calculate offset and limit dynamically\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n      \r\n        // Dispatch the API call with updated parameters\r\n        const responseObj = {\r\n          status: 1,\r\n          offset,\r\n          limit\r\n        }\r\n        dispatch(OrderListData(responseObj)).finally(() => {\r\n          setActiveOrderLoading(false);\r\n        });\r\n      }\r\n      // status - 5 for Delivered Order\r\n      if(value === 1) {\r\n        // setActiveOrderIndex(null);\r\n        // setReturnOrderIndex(null);\r\n        // setCancelOrderIndex(null);\r\n        // setDeliveredOrderIndex(null);\r\n        dispatch(setOrderListResponse(null))\r\n        setDeliveredOrderLoading(true);\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || deliveredItemsPerPage;\r\n      \r\n        // Update state with URL parameters\r\n        setDeliveredPage(pageParam - 1); // Sync pagination (0-based indexing)\r\n        setDeliveredItemsPerPage(itemsPerPageParam);\r\n      \r\n        // Calculate offset and limit dynamically\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n      \r\n      \r\n        const responseObj = {\r\n          status: 5,\r\n          offset,\r\n          limit\r\n        }\r\n        dispatch(OrderListData(responseObj)).finally(() => {\r\n          setDeliveredOrderLoading(false);\r\n        });\r\n      }\r\n      // status - 6 for Return Order\r\n      if(value === 2) {\r\n        // setActiveOrderIndex(null);\r\n        // setReturnOrderIndex(null);\r\n        // setCancelOrderIndex(null);\r\n        // setDeliveredOrderIndex(null);\r\n        setReturnOrderLoading(true);\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || returnItemsPerPage;\r\n      \r\n        // Update state with URL parameters\r\n        setReturnPage(pageParam - 1); // Sync pagination (0-based indexing)\r\n        setReturnItemsPerPage(itemsPerPageParam);\r\n      \r\n        // Calculate offset and limit dynamically\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n      \r\n        const responseObj = {\r\n          status: 6,\r\n          offset,\r\n          limit\r\n        }\r\n        dispatch(OrderListData(responseObj)).finally(() => {\r\n          setReturnOrderLoading(false);\r\n        });\r\n      }\r\n      // status - 3 for Cancel Order\r\n      if(value === 3) {\r\n        // setActiveOrderIndex(null);\r\n        // setReturnOrderIndex(null);\r\n        // setCancelOrderIndex(null);\r\n        // setDeliveredOrderIndex(null);\r\n        // setCancelledOrderLoading(true);\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const pageParam = parseInt(searchParams.get(\"page\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(searchParams.get(\"itemsPerPage\"), 10) || cancelItemsPerPage;\r\n      \r\n        // Update state with URL parameters\r\n        setCancelPage(pageParam - 1); // Sync pagination (0-based indexing)\r\n        setCancelItemsPerPage(itemsPerPageParam);\r\n      \r\n        // Calculate offset and limit dynamically\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n        const responseObj = {\r\n          status: 3,\r\n          offset,\r\n          limit\r\n        }\r\n        dispatch(OrderListData(responseObj)).finally(() => {\r\n          setCancelledOrderLoading(false);\r\n        });\r\n      }\r\n      setActiveOrderTab(value);\r\n    }\r\n    const baseUrl = window.origin;\r\n    return (\r\n    <div className=\"userProfile\">\r\n      <Helmet>\r\n          <title>{'Your Profile | Manage Account & Orders | FikFis'}</title>\r\n          <meta name=\"description\" content={\"Access and manage your FikFis account, track orders, update details, and personalize your shopping experience—all in one place.\"} />\r\n          <meta name=\"keywords\" content={'Your Profile | Manage Account & Orders | FikFis'} />\r\n          {/* <!-- Open Graph / Facebook --> */}\r\n          <meta property=\"og:title\" content={'Your Profile | Manage Account & Orders | FikFis'} />\r\n          <meta property=\"og:description\" content={\"Access and manage your FikFis account, track orders, update details, and personalize your shopping experience—all in one place.\"} />\r\n          <meta property=\"og:image\" content={`${baseUrl}/images/icons/LOGO1.png`} />\r\n          <meta property=\"og:url\" content={window.location.href} />\r\n          <meta property=\"og:type\" content=\"article\" />\r\n          {/* <!-- Twitter --> */}  \r\n          <meta property=\"twitter:card\" content=\"article\" />\r\n          <meta property=\"twitter:url\" content={window.location.href} />\r\n          <meta property=\"twitter:title\" content={'Your Profile | Manage Account & Orders | FikFis'} />\r\n          <meta property=\"twitter:description\" content={\"Access and manage your FikFis account, track orders, update details, and personalize your shopping experience—all in one place.\"} />\r\n          <meta property=\"twitter:image\" content={`${baseUrl}/images/icons/LOGO1.png`} />\r\n      </Helmet>\r\n      <h1>Your Profile</h1>\r\n      <div className=\"vertical-tabs-container\">\r\n        <div className=\"tabs\">\r\n          <div className=\"profile_user_image\">\r\n            <img src={(imagePreview ? imagePreview : profile_pic) || '/images/icons/avtar1.png'} alt={fullname} />\r\n            <div className=\"editMode\">\r\n              <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\r\n              <img src={'/images/icons/edit.svg'} alt={'edit icon'} />\r\n            </div>\r\n          </div>\r\n          {errorFileType && <div className=\"error errorImageType\">{errorFileType}</div>}\r\n          <p>{user[0]?.data? user[0]?.data.first_name + \" \" + user[0]?.data.last_name.slice(0, 10) : ''}</p>\r\n          <div className=\"email\">{email}</div>\r\n          <div\r\n            className={`tab ${activeTab === 0 ? \"active\" : \"\"}`}\r\n            onClick={() => handleActiveTabs(0)}\r\n          >\r\n            <img src=\"/images/profile/user1.svg\" alt=\"Login\" />\r\n            <span>Login and Security</span>\r\n          </div>\r\n          <div\r\n            className={`tab ${activeTab === 1 ? \"active\" : \"\"}`}\r\n            onClick={() => handleActiveTabs(1)}\r\n          >\r\n            <img src=\"/images/profile/orders.svg\" alt=\"Your Orders\" />\r\n            <span>Your Orders</span>\r\n          </div>\r\n          <div\r\n            className={`tab ${activeTab === 2 ? \"active\" : \"\"}`}\r\n            onClick={() => handleActiveTabs(2)}\r\n          >\r\n            <img src=\"/images/profile/address.svg\" alt=\"Your Address\" />\r\n            <span>Your Address</span>\r\n          </div>\r\n          <div\r\n            className={`tab ${activeTab === 3 ? \"active\" : \"\"}`}\r\n            onClick={() => handleActiveTabs(3)}\r\n          >\r\n            <img src=\"/images/profile/reviews.svg\" alt=\"Your Reviews\" />\r\n            <span>Your Reviews</span>\r\n          </div>\r\n          <div\r\n            className={`tab ${activeTab === 4 ? \"active\" : \"\"}`}\r\n            onClick={() => handleActiveTabs(4)}\r\n          >\r\n            <img src=\"/images/profile/coupen.svg\" alt=\"Coupons & offers\" />\r\n            <span>Coupons & offers</span>\r\n          </div>\r\n          <div\r\n            className={`tab ${activeTab === 5 ? \"active\" : \"\"}`}\r\n            onClick={() => handleActiveTabs(5)}\r\n          >\r\n            <img src=\"/images/profile/whistlist.svg\" alt=\"Your Wishlist\" />\r\n            <span>Your Wishlist</span>\r\n          </div>\r\n          <div\r\n            className={`tab ${activeTab === 6 ? \"active\" : \"\"}`}\r\n            onClick={() => handleActiveTabs(6)}\r\n          >\r\n            <img src=\"/images/profile/notification.svg\" alt=\"Notifications\" />\r\n            <span>Notifications</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"tab-content\">\r\n          {activeTab === 0 && (\r\n            <div className=\"login_security\">\r\n              <h3>Login and Security</h3>\r\n              <div className=\"login_securityWrapper\">\r\n                <form onSubmit={handleSubmit}>\r\n                  <div className=\"box\">\r\n                    <div className=\"form-control\">\r\n                      <label htmlFor=\"fullName\">Full Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"fullName\"\r\n                        placeholder=\"Full Name\"\r\n                        value={formData.fullName}\r\n                        onChange={handleInputChange}\r\n                      />\r\n                      {errors.fullName && (\r\n                        <span className=\"error\">{errors.fullName}</span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"box\">\r\n                    <div className=\"form-control\">\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        placeholder=\"Email\"\r\n                        value={formData.email}\r\n                        onChange={handleInputChange}\r\n                      />\r\n                      {errors.email && (\r\n                        <span className=\"error\">{errors.email}</span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"box\">\r\n                    <div className=\"form-control\">\r\n                      <label htmlFor=\"Mobile or Phone Number\">\r\n                        Mobile or Phone Number\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"phone\"\r\n                        placeholder=\"Mobile or Phone Number\"\r\n                        value={formData.phone}\r\n                        onChange={handleInputChange}\r\n                      />\r\n                      {errors.phone && (\r\n                        <span className=\"error\">{errors.phone}</span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"explore contact sp-10\"\r\n                    style={{\r\n                      cursor: loading ? \"not-allowed\" : \"pointer\",\r\n                      opacity: loading ? 0.6 : 1,\r\n                    }}\r\n                  >\r\n                    {loading && (\r\n                      <img\r\n                        src=\"/images/loader1.svg\"\r\n                        alt=\"Loader Image\"\r\n                        style={{ display: \"flex\", margin: \"auto\" }}\r\n                      />\r\n                    )}\r\n                    {!loading && <span>save changes</span>}\r\n                  </button>\r\n                </form>\r\n              </div>\r\n              <h3>Change Password</h3>\r\n              <div className=\"login_securityWrapper\">\r\n                <form onSubmit={handlePasswordUpdateSubmit}>\r\n                <InputField\r\n                    label={OLD_PASSWORD_LABEL}\r\n                    placeholder={OLD_PASSWORD_ENTER}\r\n                    type={PASSWORD_TYPE}\r\n                    name={OLD_PASSWORD}\r\n                    value={changePassword.oldPassword}\r\n                    onChange={handleChange}\r\n                    required\r\n                    validate={validatePasswordLength}\r\n                    errorMessage={PASSWORD}\r\n                  />\r\n                  <div className=\"input-field\">\r\n                    <label htmlFor={PASSWORD_TYPE}>{NEW_PASSWORD_LABEL}</label>\r\n                    <input\r\n                      type={PASSWORD_TYPE}\r\n                      placeholder={NEW_PASSWORD_ENTER}\r\n                      name={NEW_PASSWORD}\r\n                      id={PASSWORD_TYPE}\r\n                      value={password}\r\n                      onChange={handleFormPasswordChange}\r\n                      required\r\n                    />\r\n                    {passwordError && (\r\n                      <p className=\"error-message\">{passwordError}</p>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                    <label htmlFor={CONFIRM_PASSWORD_LABEL}>{CONFIRM_PASSWORD_LABEL}</label>\r\n                    <input\r\n                      type={PASSWORD_TYPE}\r\n                      placeholder={CONFIRM_PASSWORD_LABEL}\r\n                      name={CONFIRM_PASSWORD}\r\n                      id={CONFIRM_PASSWORD}\r\n                      value={confirmPassword}\r\n                      onChange={handleConfirmPasswordChange}\r\n                      required\r\n                    />\r\n                    {confirmPasswordError && <p className=\"error-message\">{confirmPasswordError}</p>}\r\n                  </div>\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"explore contact sp-10\"\r\n                    style={{\r\n                      cursor: loading ? \"not-allowed\" : \"pointer\",\r\n                      opacity: loading ? 0.6 : 1,\r\n                    }}\r\n                  >\r\n                    {loading && (\r\n                      <img\r\n                        src=\"/images/loader1.svg\"\r\n                        alt=\"Loader Image\"\r\n                        style={{ display: \"flex\", margin: \"auto\" }}\r\n                      />\r\n                    )}\r\n                    {!loading && <span>Submit</span>}\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {activeTab === 1 && (\r\n            <div className=\"user_order_list\">\r\n              \r\n                <>\r\n                  <h3>Track, return, or buy things again</h3>\r\n                  <div className=\"horizontal-tabs\">\r\n                    <div\r\n                      className={activeOrderTab === 0 ? \"active\" : \"\"}\r\n                      onClick={() => handleActiveOrderTab(0)}\r\n                    >\r\n                      Active Orders\r\n                    </div>\r\n                    <div\r\n                      className={activeOrderTab === 1 ? \"active\" : \"\"}\r\n                      onClick={() => handleActiveOrderTab(1)}\r\n                    >\r\n                      Delivered Orders\r\n                    </div>\r\n                    <div\r\n                      className={activeOrderTab === 2 ? \"active\" : \"\"}\r\n                      onClick={() => handleActiveOrderTab(2)}\r\n                    >\r\n                      Return Orders\r\n                    </div>\r\n                    <div\r\n                      className={activeOrderTab === 3 ? \"active\" : \"\"}\r\n                      onClick={() => handleActiveOrderTab(3)}\r\n                    >\r\n                      Cancel Orders\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"order-content\">\r\n                    {activeOrderTab === 0 && (\r\n                      <>\r\n                      {activeOrderLoading ? (\r\n                          <div className=\"loadingContainer\">\r\n                              <CircularProgress />\r\n                          </div>\r\n                      ) :(\r\n                        <ActiveOrders />\r\n                      )}\r\n                    </>\r\n                    )}\r\n                    {activeOrderTab === 1 && (\r\n                      <>\r\n                        {deliveredOrderLoading ? (\r\n                          <div className=\"loadingContainer\">\r\n                              <CircularProgress />\r\n                          </div>\r\n                          ) :(\r\n                            <DeliveredOrders />\r\n                        )}\r\n                      </>\r\n                    )}\r\n                    {activeOrderTab === 2 && (\r\n                      <>\r\n                        {returnOrderLoading ? (\r\n                          <div className=\"loadingContainer\">\r\n                              <CircularProgress />\r\n                          </div>\r\n                        ) :(\r\n                          <ReturnOrders />\r\n                        )}\r\n                      </>\r\n                    )}\r\n                    {activeOrderTab === 3 && (\r\n                      <>\r\n                      {cancelledOrderLoading ? (\r\n                        <div className=\"loadingContainer\">\r\n                            <CircularProgress />\r\n                        </div>\r\n                        ) :(\r\n                        <CancelledOrders />\r\n                      )}\r\n                      </>\r\n                      )}\r\n                  </div>\r\n                </>\r\n            </div>\r\n          )}\r\n          {activeTab === 2 && (\r\n            <>\r\n              {addressLoading ? (\r\n                  <div className=\"loadingContainer\">\r\n                      <CircularProgress />\r\n                  </div>\r\n              ) :(\r\n                <Address />\r\n              )}\r\n            </>\r\n          )}\r\n          {activeTab === 3 && (\r\n            <Reviews />\r\n          )}\r\n          {activeTab === 4 && (\r\n            <Coupens />\r\n          )}\r\n          {activeTab === 5 && (\r\n            <Wishlist />\r\n          )}\r\n          {activeTab === 6 && (\r\n            <>\r\n              <Notifications />\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","export const FormatDateTime = (dateTime) => {\r\n    const date = new Date(dateTime);\r\n    const formattedDate = date.toLocaleDateString(); // Format as MM/DD/YYYY or DD/MM/YYYY based on locale\r\n    const formattedTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }); // Format as HH:MM\r\n    return `${formattedDate} ${formattedTime}`;\r\n};\r\n\r\nexport const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const day = date.getDate();\r\n    const month = date.toLocaleString('default', { month: 'short' });\r\n  \r\n    // Adding suffixes for the day\r\n    const daySuffix =\r\n      day === 1 || day === 21 || day === 31 ? \"st\" :\r\n      day === 2 || day === 22 ? \"nd\" :\r\n      day === 3 || day === 23 ? \"rd\" : \"th\";\r\n  \r\n    return `${day}${daySuffix} ${month}`;\r\n  };\r\n\r\n  export const formatDateTimeProduct = (dateString) => {\r\n    if (!dateString) return \"Invalid Date\";\r\n  \r\n    // Check if the input is a datetime (contains space)\r\n    const isDateTime = dateString.includes(\" \");\r\n  \r\n    let parsedDate;\r\n  \r\n    if (isDateTime) {\r\n      // If datetime, split the date and time, then parse both parts\r\n      const [datePart, timePart] = dateString.split(\" \");\r\n      const [year, month, day] = datePart.split(\"-\").map(Number);\r\n      const [hour, minute] = timePart.split(\":\").map(Number);\r\n  \r\n      // Create a new Date object from the datetime components\r\n      parsedDate = new Date(year, month - 1, day, hour, minute); // Month is 0-indexed\r\n    } else {\r\n      // If only date, parse the date part only\r\n      const [day, month, year] = dateString.split(\"-\").map(Number);\r\n      parsedDate = new Date(year, month - 1, day); // Month is 0-indexed\r\n    }\r\n  \r\n    // Check if the parsed date is valid\r\n    if (isNaN(parsedDate)) return \"Invalid Date\";\r\n  \r\n    const weekDay = parsedDate.toLocaleString(\"default\", { weekday: \"long\" });\r\n    const shortMonth = parsedDate.toLocaleString(\"default\", { month: \"short\" });\r\n    const fullYear = parsedDate.getFullYear();\r\n  \r\n    const date = parsedDate.getDate();\r\n    let hour = parsedDate.getHours();\r\n  \r\n    // Determine AM or PM and adjust hour for 12-hour format\r\n    const period = hour >= 12 ? \"PM\" : \"AM\";\r\n    hour = hour % 12 || 12; // Convert 0 to 12 for 12-hour format\r\n    hour = hour.toString().padStart(2, \"0\");\r\n  \r\n    const minute = parsedDate.getMinutes().toString().padStart(2, \"0\");\r\n  \r\n    // Adding suffixes for the day\r\n    const daySuffix =\r\n      date === 1 || date === 21 || date === 31\r\n        ? \"st\"\r\n        : date === 2 || date === 22\r\n        ? \"nd\"\r\n        : date === 3 || date === 23\r\n        ? \"rd\"\r\n        : \"th\";\r\n  \r\n    return {\r\n      formattedDate: `${parsedDate.getDate().toString().padStart(2, \"0\")}-${(parsedDate.getMonth() + 1)\r\n        .toString()\r\n        .padStart(2, \"0\")}-${parsedDate.getFullYear()}`,\r\n      fullDay: weekDay,\r\n      time: isDateTime ? `${hour}:${minute} ${period}` : null, // Only include time if it's a datetime\r\n      components: {\r\n        day: date,\r\n        month: shortMonth,\r\n        weekDay,\r\n        hour,\r\n        minute,\r\n        period,\r\n      },\r\n    };\r\n  };\r\n  \r\n\r\nexport const formatClasses = (date) => {\r\n  const currentDate = new Date();\r\n  const targetDate = new Date(date);\r\n\r\n  if (targetDate.toDateString() === currentDate.toDateString()) {\r\n    return \"order started\"; // Same day as current date\r\n  } else if (targetDate < currentDate) {\r\n    return \"order started done\"; // Date has passed\r\n  } else {\r\n    return \"order\"; // Future date\r\n  }\r\n};\r\n\r\nexport const formatDateTimeFormatProduct = (dateString) => {\r\n  if (!dateString) return \"Invalid Date\";\r\n\r\n  // Parse the input date string (YYYY-MM-DD)\r\n  const [year, month, day] = dateString.split(\"-\").map(Number);\r\n\r\n  // Create a new Date object from the parsed values\r\n  const parsedDate = new Date(year, month - 1, day); // Month is 0-indexed\r\n\r\n  // Check if the parsed date is valid\r\n  if (isNaN(parsedDate)) return \"Invalid Date\";\r\n\r\n  // Format the date to DD-MM-YYYY\r\n  const formattedDate = `${parsedDate.getDate().toString().padStart(2, '0')}-${(parsedDate.getMonth() + 1).toString().padStart(2, '0')}-${parsedDate.getFullYear()}`;\r\n\r\n  return formattedDate;\r\n};\r\n\r\n","export const ShareProduct = async (productId) => {\r\n  const productURL = `${window.location.origin}/product/${productId}`;\r\n\r\n  if (navigator.share) {\r\n    try {\r\n      await navigator.share({\r\n        title: \"Check out this product!\",\r\n        url: productURL,\r\n      });\r\n    } catch (error) {\r\n      // console.error(\"Error sharing product:\", error);\r\n    }\r\n  } else {\r\n    navigator.clipboard.writeText(productURL);\r\n    alert(\"Link copied to clipboard!\");\r\n  }\r\n};\r\n\r\nexport const ShareBlogs = async (blogId) => {\r\n  const blogURL = `${window.location.origin}/blog/${blogId}`;\r\n\r\n  if (navigator.share) {\r\n    try {\r\n      await navigator.share({\r\n        title: \"Check out this blog!\",\r\n        url: blogURL,\r\n      });\r\n    } catch (error) {\r\n      // console.error(\"Error sharing blog:\", error);\r\n    }\r\n  } else {\r\n    navigator.clipboard.writeText(blogURL);\r\n    alert(\"Link copied to clipboard!\");\r\n  }\r\n}\r\n"],"names":["_ref","userrating","onRatingChange","rating","setRating","useState","totalStars","_jsx","className","children","Array","map","star","index","currentRating","_jsxs","type","name","value","onChange","handleRatingSelect","style","color","Notifications","page","setPage","perPage","setPerPage","loading","setLoading","dispatch","useDispatch","location","useLocation","navigate","useNavigate","notifications","notificationCount","useSelector","state","user","useEffect","searchParams","URLSearchParams","search","pageParam","parseInt","get","itemsPerPageParam","responseObj","offset","limit","getNotificationsData","finally","DEFAULT_OPTIONS","filter","option","onClick","handleClearNotification","clearNotificationsData","CircularProgress","notification","src","image","alt","title","message","FormatDateTime","created_at","length","ReactPaginate","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","Math","max","ceil","marginPagesDisplayed","pageRangeDisplayed","onPageChange","ev","data","selected","set","toString","handleNotificationsPageChange","containerClassName","activeClassName","forcePage","disabled","Wishlist","wishListPage","setWishListPage","wishListItemsPerPage","setWishListItemsPerPage","listWishlist","totalWishlistCount","product","getListOfWhistListData","item","imageUrl","product_id","productDetailData","handleAddToCart","StarRating","discountedPrice","price","offer","ShareProduct","productId","updatedWishlist","sku_id","setListWishList","deleteSingleWhistListData","then","fetchResponseObj","handleRemoveWishListItem","handleWishListPageChange","Coupens","copyMessage","setCopyMessage","offerList","getOfferList","_Fragment","handleCopy","navigator","clipboard","writeText","setTimeout","catch","err","coupon_code","coupon_title","description","term_of_use","dangerouslySetInnerHTML","__html","valid_from","valid_till","Reviews","reviewPage","setReviewPage","reviewPerPage","setReviewPerPage","userReviewCount","userReview","getUserReviewProductData","product_name","review_images","img_data","handleReviewPageChange","DeliveredOrders","deliveredPage","setDeliveredPage","deliveredItemsPerPage","setDeliveredItemsPerPage","deliveredOrderIndex","setDeliveredOrderIndex","isInitialLoad","setIsInitialLoad","delivered","isOpen","setIsOpen","orderList","deliveredOrderListCount","orderDetail","returnStatus","status","cart","prev","OrderListData","handleNavigateToDeliveredOrderDetail","productList","scroll","arguments","undefined","scrollToBottom","_orderDetail$shipping","_orderDetail$shipping2","_orderDetail$shipping3","_orderDetail$shipping4","_orderDetail$shipping5","_orderDetail$shipping6","_orderDetail$shipping7","_orderDetail$statusDe","_orderDetail$orderIte3","_orderDetail$orderIte4","_orderDetail$orderIte5","_orderDetail$orderIte6","_orderDetail$orderIte7","_orderDetail$orderIte8","_orderDetail$orderIte9","_orderDetail$orderIte10","product_image","formatDateTimeFormatProduct","return_date","order_number","invoice_url","downloadPDF","url","window","open","_orderDetail$orderIte","matchingProducts","orderItems","order","_order$productName","productName","toLowerCase","e","handleDeliveredViewOrderDetails","preventDefault","prevIndex","order_id","OrderDetailData","_orderDetail$orderIte2","_order$productName2","handleCancelOrder","cancelOrderPayload","orderId","skuId","setCancelOrderModal","shippingAddress","house_number","street","locality","country","postcode","phone","statusDetails","date","quantity","orderNumber","totalPrice","variants","Color","_order$variants","Size","_order$variants2","formatDateTimeProduct","formattedDate","handleDeliveredPageChange","ReturnOrders","returnPage","setReturnPage","returnItemsPerPage","setReturnItemsPerPage","returnOrderIndex","setReturnOrderIndex","returned","returnOrderListCount","handleNavigateToDetail","_item$order_status","order_status","returnDate","handleReturnedViewOrderDetails","handleReturnPageChange","CancelledOrders","cancelPage","setCancelPage","cancelItemsPerPage","setCancelItemsPerPage","cancelOrderIndex","setCancelOrderIndex","cancelled","cancelledOrderListCount","handleNavigateToCancelledOrderDetail","Cancelled","handleCancelledViewOrderDetails","handleCancelPageChange","ActiveOrders","activePage","setActivePage","activeItemsPerPage","setActiveItemsPerPage","activeOrderIndex","setActiveOrderIndex","active","activeOrderListCount","estimatedDeliveryDate","_orderDetail$statusDe2","_orderDetail$orderIte11","_orderDetail$orderIte12","handleActiveViewOrderDetails","fullDay","handleActivePageChange","React","Address","_user$","_user$$addresses","isInitialAddressLoad","setIsInitialAddressLoad","itemsPerPage","setItemsPerPage","totalAddressCount","isEditingAddress","setIsEditingAddress","addressFormData","setAddressFormData","id","fullName","email","house_no","address","city","pincode","isDefault","formErrors","setFormErrors","handleAddressInputChange","target","validateAllFields","newErrors","trim","test","addressErrors","validateAddressFields","getListAddress","onSubmit","full_name","mobile","Object","keys","updateListAddress","addListAddress","password","updatedValue","startsWith","addresses","_address$full_name","_address$mobile","_address$email","_address$house_number","_address$street","_address$locality","_address$postcode","_address$country","scrollTo","top","behavior","editAddressObj","handleEditAddress","addressId","deleteListAddress","handleDeleteAddress","defaultListAddress","handleSetDefaultAddress","handlePageChange","Profile","_user$2","_user$2$data","_user$3","_user$3$data","_user$4","_user$5","_user$6","activeTab","setActiveTab","activeOrderTab","setActiveOrderTab","setQuantity","activeOrderLoading","setActiveOrderLoading","returnOrderLoading","setReturnOrderLoading","cancelledOrderLoading","setCancelledOrderLoading","deliveredOrderLoading","setDeliveredOrderLoading","addressLoading","setAddressLoading","changePassword","modal","profile_pic","fullname","first_name","last_name","errorFileType","setErrorFileType","imagePreview","setImagePreview","imageFile","setImageFile","getUserRequest","setPassword","confirmPassword","setConfirmPassword","passwordError","setPasswordError","confirmPasswordError","setConfirmPasswordError","isPasswordValid","setIsPasswordValid","formData","setFormData","errors","setErrors","handleInputChange","handleActiveTabs","pathname","handleActiveOrderTab","setOrderListResponse","baseUrl","origin","Helmet","content","property","href","accept","file","files","URL","createObjectURL","slice","validateInputs","firstName","restName","split","join","updateProfileRequest","htmlFor","placeholder","cursor","opacity","display","margin","old_password","oldPassword","new_password","newPassword","confirm_password","changePasswordRequest","setChangePassword","InputField","label","OLD_PASSWORD_LABEL","OLD_PASSWORD_ENTER","PASSWORD_TYPE","OLD_PASSWORD","required","validate","PASSWORD","errorMessage","NEW_PASSWORD_LABEL","NEW_PASSWORD_ENTER","NEW_PASSWORD","validatePasswordLength1","PASSWORD_NOT_MATCH_ERROR","CONFIRM_PASSWORD_LABEL","CONFIRM_PASSWORD","confirmPasswordValue","dateTime","Date","toLocaleDateString","toLocaleTimeString","hour","minute","formatDate","dateString","day","getDate","toLocaleString","month","isDateTime","includes","parsedDate","datePart","timePart","year","Number","isNaN","weekDay","weekday","shortMonth","getFullYear","getHours","period","padStart","getMinutes","getMonth","time","components","async","productURL","share","error","alert","ShareBlogs","blogURL","blogId"],"sourceRoot":""}