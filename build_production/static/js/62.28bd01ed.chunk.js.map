{"version":3,"file":"static/js/62.28bd01ed.chunk.js","mappings":"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","sources":["components/ProductListCard/ProductListCard.jsx","components/StarRating/StarRating.jsx","pages/SectionDetail/SectionDetail.jsx","utils/FormatDateTime.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport StarRating from '../StarRating/StarRating';\r\nimport './ProductListCard.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst ProductListCard = ({ \r\n  id,\r\n  image, \r\n  name, \r\n  userrating, \r\n  discountPrice, \r\n  originalPrice, \r\n  discountLabel, \r\n  time,\r\n  save,\r\n  coupenCode,\r\n  deliveryTime,\r\n  freeDelivery,\r\n  bestSeller,\r\n  wishlistStatus,\r\n  sku_id,\r\n  onAddToCart,\r\n  onProductClick,\r\n  onIncrement,\r\n  onDecrement,\r\n  cartQuantity,\r\n  offer,\r\n  onProductImageClick,\r\n  handleWishlistToggle,\r\n}) => {\r\n  const [whistListBox, setWhistListBox] = useState({\r\n    whistlist: \"/images/product/whistlist.svg\",\r\n    whistlistFill: \"/images/product/whistlist-fill.svg\",\r\n  });\r\n  const { user } = useSelector((state) => state.user);\r\n\r\n  // const handleIncrement = () => setQuantity((prevQuantity) => prevQuantity + 1);\r\n  // const handleDecrement = () => setQuantity((prevQuantity) => Math.max(prevQuantity - 1, 0));\r\n\r\n  return (\r\n    <div className='productBoxes' key={id}>\r\n      <div className=\"whislistBox\">\r\n        <div className=\"wishlist-btn\" onClick={handleWishlistToggle}>\r\n          {wishlistStatus?.toLowerCase() === 'yes' ? (\r\n            <img\r\n              src={whistListBox.whistlistFill}\r\n              alt=\"Whistlist Product\"\r\n            />\r\n          ) : (\r\n            <img src={whistListBox.whistlist} alt=\"Whistlist Product\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n      {image && <img src={image} alt={name} onClick={onProductImageClick}  />}\r\n      {/* {image && <img src={image} alt={name} onClick={onProductClick}  />} */}\r\n      {name && <h4>{name.length > 50 ? `${name.slice(0, 50)}...` : name}</h4>}\r\n      <div className='priceList'>\r\n        {discountPrice && <p className='discount'>£ {discountPrice}</p>}\r\n        {originalPrice && <p className='original'>£ {originalPrice}</p>}\r\n      </div>\r\n      <div className='ratingAndCartWrap'>\r\n        {userrating && <StarRating userrating={userrating} />}\r\n        {offer ? null : (\r\n            cartQuantity === 0 ? (\r\n            // Show Add Button if quantity is 0\r\n            <button type=\"button\" onClick={() => onAddToCart(sku_id)} \r\n              // disabled={user.length === 0 ? true : false} \r\n              title={user.length === 0 ? 'Please login to add items to cart.' : 'Add to cart'}\r\n              >Add</button>\r\n          ) : (\r\n            <button type=\"button\" onClick={() => onProductClick()} \r\n              // disabled={user.length === 0 ? true : false} \r\n              title={user.length === 0 ? 'Please login to add items to cart.' : 'Add to cart'}\r\n              >Add</button>\r\n            // Show Plus/Minus Buttons if quantity is greater than 0\r\n            // <div className=\"quantityButtons\">\r\n            //   <button type=\"button\"  onClick={() => onIncrement(sku_id)}>+</button>\r\n            //   <span>{cartQuantity}</span>\r\n            //   <button type=\"button\" onClick={() => onDecrement(sku_id)}>-</button>\r\n            // </div>\r\n          )\r\n        )}\r\n      </div>\r\n      \r\n      {(discountLabel || time || save || coupenCode) && (\r\n        <div className={`offerList ${save ? 'saveMode' : ''}`}>\r\n          {discountLabel && <span>{discountLabel}</span>}\r\n          {time && <h6>{time}</h6>}\r\n          {coupenCode && <p>{coupenCode}</p>}\r\n        </div>\r\n      )}\r\n\r\n      {deliveryTime && <p>{deliveryTime}</p>}\r\n      {freeDelivery && <p>{freeDelivery}</p>}\r\n      {bestSeller && <div className=\"ribbon\">#Best Seller</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductListCard;\r\n","import React, { useState } from 'react';\r\nimport './StarRating.css';\r\n\r\nconst StarRating = ({ userrating = 0, onRatingChange }) => {\r\n    const [rating, setRating] = useState(userrating ? userrating : 0);\r\n    // const [hover, setHover] = useState(null);\r\n    // const [totalStars, setTotalStars] = useState(5);\r\n    const [totalStars] = useState(5);\r\n    const handleRatingSelect = (currentRating) => {\r\n        setRating(currentRating); // Update local rating state\r\n        if (onRatingChange) {\r\n            onRatingChange(currentRating); // Notify parent of the change\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"starRating\">\r\n            {[...Array(totalStars)].map((star, index) => {\r\n                const currentRating = index + 1;\r\n                return (\r\n                    <label key={index}>\r\n                        <input\r\n                            key={star}\r\n                            type=\"radio\"\r\n                            name=\"rating\"\r\n                            value={currentRating}\r\n                            onChange={() => handleRatingSelect(currentRating)}\r\n                            userrating = {rating}\r\n                        />\r\n                        <span\r\n                            className=\"star\"\r\n                            style={{\r\n                                color:\r\n                                    // currentRating <= (hover || rating) ? \"#ffc107\" : \"#e4e5e9\",\r\n                                    currentRating <= rating ? \"#ffc107\" : \"#e4e5e9\",\r\n                            }}\r\n                        // onMouseEnter={() => setHover(currentRating)}\r\n                        // onMouseLeave={() => setHover(null)}\r\n                        >\r\n                            &#9733;\r\n                        </span>\r\n                    </label>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StarRating","import React, { useEffect, useState } from 'react';\r\nimport './SectionDetail.css';\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addProductOnWhistList, addToCartData, deleteSingleWhistListData, getAllOffersData, getProductSection, productDetailData, viewItemsInCartData } from '../../store/slice/api_integration';\r\nimport ProductListCard from '../../components/ProductListCard/ProductListCard';\r\nimport { CircularProgress } from '@mui/material';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { DEFAULT_OPTIONS } from '../../utils/Constants';\r\nimport { formatDate } from '../../utils/FormatDateTime';\r\nimport { setViewCartItems } from '../../store/slice/cartSlice';\r\nimport { toggleModal } from '../../store/slice/modalSlice';\r\n\r\nconst SectionDetail = () => {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const location = useLocation(); // Always define useLocation inside the functional component\r\n    const [loading, setLoading] = useState(false);\r\n    const { productSectionData, productSectionCount = 0, allOffersList } = useSelector(state => state.product);\r\n    const { id } = useParams();\r\n    const [triggerSkuId, setTriggerSkuId] = useState(null);\r\n    const { user } = useSelector((state) => state.user);\r\n\r\n    const queryParams = new URLSearchParams(location.search); // Initialize queryParams here\r\n    const title = queryParams.get(\"title\");\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [itemsPerPage, setItemsPerPage] = useState(30);\r\n\r\n    useEffect(() => {\r\n        const pageParam = parseInt(queryParams.get(\"sectionPage\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(queryParams.get(\"sectionItemsPerPage\"), 10) || itemsPerPage;\r\n\r\n        setPage(pageParam - 1); // Adjust for 0-based indexing\r\n        setItemsPerPage(itemsPerPageParam);\r\n\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            if (Number(id) === 0) {\r\n                const responseObj = { offset, limit };\r\n                await dispatch(getAllOffersData(responseObj));\r\n            } else {\r\n                const responseObj = { group_id: id, offset, limit };\r\n                await dispatch(getProductSection(responseObj));\r\n            }\r\n            setLoading(false);\r\n        };\r\n    \r\n        fetchData();\r\n    }, [location.search, dispatch, id]);\r\n\r\n    const handleItemsPerPageChange = (e) => {\r\n        const newItemsPerPage = parseInt(e.target.value, 10);\r\n        queryParams.set(\"sectionPage\", 1); // Reset to page 1\r\n        queryParams.set(\"sectionItemsPerPage\", newItemsPerPage);\r\n        navigate(`?${queryParams.toString()}`);\r\n    };\r\n\r\n    const handlePageChange = (data) => {\r\n        const { selected } = data;\r\n        queryParams.set(\"sectionPage\", selected + 1); // Convert to 1-based indexing\r\n        navigate(`?${queryParams.toString()}`);\r\n    };\r\n\r\n    const handleProductClick = (product) => {\r\n        if(user.length === 0) {\r\n            dispatch(toggleModal(true));\r\n        } else {\r\n            const responseObj = { product_id: product.product_id };\r\n            dispatch(productDetailData(responseObj));\r\n            navigate(`/product/${product.product_id}`, { state: { product } });\r\n        }\r\n    };\r\n\r\n    const handleProcuctImageClick = (product) => {\r\n        const responseObj = { product_id: product.product_id };\r\n        dispatch(productDetailData(responseObj));\r\n        navigate(`/product/${product.product_id}`, { state: { product } });\r\n    }\r\n\r\n    const sectionItemsPerPageOptions = DEFAULT_OPTIONS.filter(option => option <= productSectionCount);\r\n\r\n    const handleAddToCartClick = (sku_id) => {\r\n        setTriggerSkuId(sku_id);\r\n        const responseObj = {\r\n          sku_id,\r\n          type: \"increase\",\r\n        };\r\n        dispatch(addToCartData(responseObj)).finally(() => {\r\n          fetchUpdatedProductList();\r\n        })\r\n    };\r\n    const handleIncrement = (sku_id) => {\r\n      const responseObj = { sku_id, type: \"increase\" };\r\n      dispatch(addToCartData(responseObj)).finally(() => {\r\n        fetchUpdatedProductList();\r\n      });\r\n    };\r\n    \r\n    const handleDecrement = (sku_id) => {\r\n      const responseObj = { sku_id, type: \"decrease\" };\r\n      dispatch(addToCartData(responseObj)).finally(() => {\r\n        fetchUpdatedProductList();\r\n      });\r\n    };\r\n\r\n    const fetchUpdatedProductList = () => {\r\n        const pageParam = parseInt(queryParams.get(\"sectionPage\"), 10) || 1;\r\n        const itemsPerPageParam = parseInt(queryParams.get(\"sectionItemsPerPage\"), 10) || itemsPerPage;\r\n        setPage(pageParam - 1); // Adjust for 0-based indexing\r\n        setItemsPerPage(itemsPerPageParam);\r\n\r\n        const offset = ((pageParam - 1) * itemsPerPageParam) + 1;\r\n        const limit = itemsPerPageParam;\r\n        const responseObj = { group_id: id, offset, limit };\r\n        dispatch(getProductSection(responseObj));\r\n        dispatch(viewItemsInCartData());\r\n        dispatch(setViewCartItems(null));\r\n    };\r\n    \r\n    const handleWishlistToggle = (productData) => {\r\n        if(user.length === 0) {\r\n          dispatch(toggleModal(true));\r\n          // setWishlistLoading(false);\r\n          return;\r\n        }\r\n    \r\n        const responseObj = { sku_id: Number(productData?.sku_id) }\r\n        if(productData?.wishlistStatus?.toLowerCase() === 'no') {\r\n          dispatch(addProductOnWhistList(responseObj)).finally(() => {\r\n            fetchUpdatedProductList();\r\n            // setWishlistLoading(false);\r\n          })\r\n        } else {\r\n            dispatch(deleteSingleWhistListData(responseObj)).finally(() => {\r\n              fetchUpdatedProductList();\r\n              // setWishlistLoading(false);\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"sectionDetail\">\r\n            {loading ? (\r\n                <div className=\"loadingContainer\">\r\n                    <CircularProgress />\r\n                </div>\r\n            ) : Number(id) === 0 && allOffersList && allOffersList.length > 0 ? (\r\n                <div className=\"productHistory\">\r\n                    <div className=\"browisingHistory\">\r\n                        <h3>{title}</h3>\r\n                    </div>\r\n                    <div className=\"productList\">\r\n                        {allOffersList.map((item, index) => (\r\n                            <div key={index}>\r\n                                <ProductListCard\r\n                                    id={item?.categoryId}\r\n                                    image={item?.categoryImage || \"/images/no-product-available.png\"}\r\n                                    name={item?.categoryName}\r\n                                    discountLabel={item?.title}\r\n                                    time={`valid till ${formatDate(item.validTill)}`}\r\n                                    wishlistStatus={item.wishlistStatus || 'no'}\r\n                                    offer={\"true\"}\r\n                                />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"paginationBox\">\r\n                        {/* <div className=\"itemsPerPageDropdown\">\r\n                            <label>Items per page: </label>\r\n                            <select value={itemsPerPage} onChange={handleItemsPerPageChange}>\r\n                                {sectionItemsPerPageOptions.map(option => (\r\n                                    <option key={option} value={option}>\r\n                                        {option}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div> */}\r\n                        <ReactPaginate\r\n                            previousLabel={\"Previous\"}\r\n                            nextLabel={\"Next\"}\r\n                            breakLabel={\"...\"}\r\n                            pageCount={Math.max(Math.ceil(productSectionCount / itemsPerPage), 1)}\r\n                            marginPagesDisplayed={2}\r\n                            pageRangeDisplayed={3}\r\n                            onPageChange={handlePageChange}\r\n                            containerClassName={\"pagination\"}\r\n                            activeClassName={\"active\"}\r\n                            forcePage={page}\r\n                            disabled={productSectionCount === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            ) : productSectionData && productSectionData.length > 0 && (\r\n                <div className=\"productHistory\">\r\n                    <div className=\"browisingHistory\">\r\n                        <h3>{title}</h3>\r\n                    </div>\r\n                    <div className=\"productList\">\r\n                        {productSectionData.map((product, index) => (\r\n                            <div key={index}>\r\n                                <ProductListCard\r\n                                    id={product?.group_id}\r\n                                    image={product.imageUrl || \"/images/no-product-available.png\"}\r\n                                    name={product.name || \"\"}\r\n                                    userrating={product.rating || \"0.0\"}\r\n                                    discountPrice={product.discountedPrice || \"\"}\r\n                                    originalPrice={product.price || \"\"}\r\n                                    save={product.offer || \"\"}\r\n                                    coupenCode={product.coupen || \"\"}\r\n                                    deliveryTime={product.deliverytime || \"\"}\r\n                                    freeDelivery={product.freedelivery || \"\"}\r\n                                    bestSeller={product.bestseller || \"\"}\r\n                                    time={product.time || \"\"}\r\n                                    discountLabel={product.offer || \"\"}\r\n                                    wishlistStatus={product.wishlistStatus || 'no'}\r\n                                    sku_id={product.sku_id} // Pass SKU ID for Add to Cart\r\n                                    // onAddToCart={() => handleAddToCartClick(product.sku_id)}\r\n                                    onAddToCart={() => handleProductClick(product)}\r\n                                    cartQuantity={Number(product.cartQuantity)}\r\n                                    onIncrement={handleIncrement}\r\n                                    onDecrement={handleDecrement}\r\n                                    onProductClick={() => handleProductClick(product)}\r\n                                    onProductImageClick={() => handleProcuctImageClick(product)}\r\n                                    handleWishlistToggle={() => handleWishlistToggle(product)}\r\n                                />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"paginationBox\">\r\n                        {/* <div className=\"itemsPerPageDropdown\">\r\n                            <label>Items per page: </label>\r\n                            <select value={itemsPerPage} onChange={handleItemsPerPageChange}>\r\n                                {sectionItemsPerPageOptions.map(option => (\r\n                                    <option key={option} value={option}>\r\n                                        {option}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div> */}\r\n                        <ReactPaginate\r\n                            previousLabel={\"Previous\"}\r\n                            nextLabel={\"Next\"}\r\n                            breakLabel={\"...\"}\r\n                            pageCount={Math.max(Math.ceil(productSectionCount / itemsPerPage), 1)}\r\n                            marginPagesDisplayed={2}\r\n                            pageRangeDisplayed={3}\r\n                            onPageChange={handlePageChange}\r\n                            containerClassName={\"pagination\"}\r\n                            activeClassName={\"active\"}\r\n                            forcePage={page}\r\n                            disabled={productSectionCount === 0}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default SectionDetail;\r\n","export const FormatDateTime = (dateTime) => {\r\n    const date = new Date(dateTime);\r\n    const formattedDate = date.toLocaleDateString(); // Format as MM/DD/YYYY or DD/MM/YYYY based on locale\r\n    const formattedTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }); // Format as HH:MM\r\n    return `${formattedDate} ${formattedTime}`;\r\n};\r\n\r\nexport const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const day = date.getDate();\r\n    const month = date.toLocaleString('default', { month: 'short' });\r\n  \r\n    // Adding suffixes for the day\r\n    const daySuffix =\r\n      day === 1 || day === 21 || day === 31 ? \"st\" :\r\n      day === 2 || day === 22 ? \"nd\" :\r\n      day === 3 || day === 23 ? \"rd\" : \"th\";\r\n  \r\n    return `${day}${daySuffix} ${month}`;\r\n  };\r\n\r\n  export const formatDateTimeProduct = (dateString) => {\r\n    if (!dateString) return \"Invalid Date\";\r\n  \r\n    // Check if the input is a datetime (contains space)\r\n    const isDateTime = dateString.includes(\" \");\r\n  \r\n    let parsedDate;\r\n  \r\n    if (isDateTime) {\r\n      // If datetime, split the date and time, then parse both parts\r\n      const [datePart, timePart] = dateString.split(\" \");\r\n      const [year, month, day] = datePart.split(\"-\").map(Number);\r\n      const [hour, minute] = timePart.split(\":\").map(Number);\r\n  \r\n      // Create a new Date object from the datetime components\r\n      parsedDate = new Date(year, month - 1, day, hour, minute); // Month is 0-indexed\r\n    } else {\r\n      // If only date, parse the date part only\r\n      const [day, month, year] = dateString.split(\"-\").map(Number);\r\n      parsedDate = new Date(year, month - 1, day); // Month is 0-indexed\r\n    }\r\n  \r\n    // Check if the parsed date is valid\r\n    if (isNaN(parsedDate)) return \"Invalid Date\";\r\n  \r\n    const weekDay = parsedDate.toLocaleString(\"default\", { weekday: \"long\" });\r\n    const shortMonth = parsedDate.toLocaleString(\"default\", { month: \"short\" });\r\n    const fullYear = parsedDate.getFullYear();\r\n  \r\n    const date = parsedDate.getDate();\r\n    let hour = parsedDate.getHours();\r\n  \r\n    // Determine AM or PM and adjust hour for 12-hour format\r\n    const period = hour >= 12 ? \"PM\" : \"AM\";\r\n    hour = hour % 12 || 12; // Convert 0 to 12 for 12-hour format\r\n    hour = hour.toString().padStart(2, \"0\");\r\n  \r\n    const minute = parsedDate.getMinutes().toString().padStart(2, \"0\");\r\n  \r\n    // Adding suffixes for the day\r\n    const daySuffix =\r\n      date === 1 || date === 21 || date === 31\r\n        ? \"st\"\r\n        : date === 2 || date === 22\r\n        ? \"nd\"\r\n        : date === 3 || date === 23\r\n        ? \"rd\"\r\n        : \"th\";\r\n  \r\n    return {\r\n      formattedDate: `${parsedDate.getDate().toString().padStart(2, \"0\")}-${(parsedDate.getMonth() + 1)\r\n        .toString()\r\n        .padStart(2, \"0\")}-${parsedDate.getFullYear()}`,\r\n      fullDay: weekDay,\r\n      time: isDateTime ? `${hour}:${minute} ${period}` : null, // Only include time if it's a datetime\r\n      components: {\r\n        day: date,\r\n        month: shortMonth,\r\n        weekDay,\r\n        hour,\r\n        minute,\r\n        period,\r\n      },\r\n    };\r\n  };\r\n  \r\n\r\nexport const formatClasses = (date) => {\r\n  const currentDate = new Date();\r\n  const targetDate = new Date(date);\r\n\r\n  if (targetDate.toDateString() === currentDate.toDateString()) {\r\n    return \"order started\"; // Same day as current date\r\n  } else if (targetDate < currentDate) {\r\n    return \"order started done\"; // Date has passed\r\n  } else {\r\n    return \"order\"; // Future date\r\n  }\r\n};\r\n\r\nexport const formatDateTimeFormatProduct = (dateString) => {\r\n  if (!dateString) return \"Invalid Date\";\r\n\r\n  // Parse the input date string (YYYY-MM-DD)\r\n  const [year, month, day] = dateString.split(\"-\").map(Number);\r\n\r\n  // Create a new Date object from the parsed values\r\n  const parsedDate = new Date(year, month - 1, day); // Month is 0-indexed\r\n\r\n  // Check if the parsed date is valid\r\n  if (isNaN(parsedDate)) return \"Invalid Date\";\r\n\r\n  // Format the date to DD-MM-YYYY\r\n  const formattedDate = `${parsedDate.getDate().toString().padStart(2, '0')}-${(parsedDate.getMonth() + 1).toString().padStart(2, '0')}-${parsedDate.getFullYear()}`;\r\n\r\n  return formattedDate;\r\n};\r\n\r\n"],"names":["_ref","id","image","name","userrating","discountPrice","originalPrice","discountLabel","time","save","coupenCode","deliveryTime","freeDelivery","bestSeller","wishlistStatus","sku_id","onAddToCart","onProductClick","onIncrement","onDecrement","cartQuantity","offer","onProductImageClick","handleWishlistToggle","whistListBox","setWhistListBox","useState","whistlist","whistlistFill","user","useSelector","state","_jsxs","className","children","_jsx","onClick","toLowerCase","src","alt","length","slice","StarRating","type","title","onRatingChange","rating","setRating","totalStars","Array","map","star","index","currentRating","value","onChange","handleRatingSelect","style","color","SectionDetail","dispatch","useDispatch","navigate","useNavigate","location","useLocation","loading","setLoading","productSectionData","productSectionCount","allOffersList","product","useParams","triggerSkuId","setTriggerSkuId","queryParams","URLSearchParams","search","get","page","setPage","itemsPerPage","setItemsPerPage","useEffect","pageParam","parseInt","itemsPerPageParam","offset","limit","async","Number","responseObj","getAllOffersData","group_id","getProductSection","fetchData","handlePageChange","data","selected","set","toString","handleProductClick","toggleModal","product_id","productDetailData","handleIncrement","DEFAULT_OPTIONS","filter","option","addToCartData","finally","fetchUpdatedProductList","handleDecrement","viewItemsInCartData","setViewCartItems","CircularProgress","item","ProductListCard","categoryId","categoryImage","categoryName","formatDate","validTill","ReactPaginate","previousLabel","nextLabel","breakLabel","pageCount","Math","max","ceil","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","forcePage","disabled","imageUrl","discountedPrice","price","coupen","deliverytime","freedelivery","bestseller","handleProcuctImageClick","productData","_productData$wishlist","addProductOnWhistList","deleteSingleWhistListData","FormatDateTime","dateTime","date","Date","toLocaleDateString","toLocaleTimeString","hour","minute","dateString","day","getDate","toLocaleString","month","formatDateTimeProduct","isDateTime","includes","parsedDate","datePart","timePart","split","year","isNaN","weekDay","weekday","shortMonth","getFullYear","getHours","period","padStart","getMinutes","formattedDate","getMonth","fullDay","components","formatDateTimeFormatProduct"],"sourceRoot":""}